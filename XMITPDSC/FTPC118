#pragma title("FTPC118 - SMF type 118 (FTP) print/WTO")
#pragma comment(copyright,"FTPC118 - Â©Paul Wells (Saudi Aramco) 2002")

/**********************************************************************
*
*  Name: FTPC118 (C language source)
*
*
*  Abstract:
*
*     A C language program which processes SMF type 118 FTP records.
*
*     The program has 2 modes of operation, selected by compile
*     and link edit options: EXITMODE and TESTMODE.
*
*     In EXITMODE, FTPC118 uses Systems Programming C facilities to run
*     as an SMF IEFU83/84 exit to format and WTO the SMF FTP records.
*     FTPC118 can also be installed as a FTP server SMF exit (FTPSMFEX),
*     but this mode does not allow it to process FTP client SMF
*     records.
*
*     In TESTMODE, FTPC118 (load module FTPT118) runs as a standard
*     C main program in batch to print the SMF FTP records to
*     standard output.
*
*
*  Operation:
*
*     EXITMODE
*     --------
*     On entry R1 points to the address of the SMF record being
*     written by the system. The chkrec() function is called to
*     verify that it is a valid type 118 FTP record. Type 118
*     subtypes 3 and 70-75 are processed. All other records
*     are ignored and control returns to the system with RC=0
*     to allow the SMF record to be written.
*
*     For a valid FTP record an output area is allocated and
*     dartn() is called to format the SMF data to be suitable
*     for WTO. The data fields processed in the FTP Client (C),
*     FTP Server (S) and FTP Server logon failure (L) records
*     is as follows.
*
*      WTO    C/S/L Description          SMF 118 Name Example
*      ---    ----- -----------          ------------ -------
*      cm=    C/S/L Subcommand (RFC959)  SMFFTPCM     cm=STOR
*      ty=    S     File type            SMFFTPTY     ty=SEQ
*      lr=    C/S/L Last reply to client C: SMFFTPTY  lr=250
*                                        S: SMFFTSLR
*                                        L: SMFFTSLR
*      cp=    C     Local port           SMFFTPCP     cp=1064
*      cf=    C     Foreign port         SMFFTPCF     cf=21
*      rp=    S/L   Remote port          SMFFTSRP     rp=4608
*      lp=    S/L   Local port           SMFFTSLP     lp=21
*      sa=    C/S/L C: Local IP address  SMFFTPSA     sa=10.13.80.11
*                   S: Remote IP address
*                   L: Remote IP address
*      sl=    C/S/L C: Remote IP address SMFFTPSL     sl=10.1.160.220
*                   S: Local IP address
*                   L: Local IP address
*      su=    C/S/L C: Remote userid     SMFFTPSU     su=AWCPAW
*                   S: Local userid
*                   L: Local userid
*             C/S   Data format          SMFFTPFM     ASCII
*             C/S   Mode                 SMFFTPMO     Stream
*             C/S   Structure            SMFFTPST     File
*             C/S   Dataset type         SMFFTPDT     Seq
*      trs=   C/S/L Start time           SMFFTTRS     trs=08:09:08.87
*      dur=   C/S   Duration             (derived)    dur=00:00:00.02
*      tbc=   C/S   Byte count           SMFFTTBC     tbc=5924
*                                        SMFFTBYF
*      rt=    C/S   Rate                 (derived)    rt=296.20kb/sec
*      hst=   C/S/L Host name            SMFFTHST     hst=tso03
*      stc=   C     Local userid         SMFFTSTC     stc=AWCPAW
*      dsn=   C/S   1st Dataset name     SMFFTDSN     dsn=AWCPAW.TEMP
*                                        SMFFTMEM
*                                        SMFFTVAR
*      ds2=   S     2nd Dataset name     SMFFTDS2     ds2=AWCPAW.TEMP2
*                                        SMFFTMM2
*                                        SMFFTVAR
*
*     Once formatted, the data is passed to an external assembler
*     subroutine to issue the WTO to the operating system. The
*     format of the output in the syslog will be similar
*     to the following.
*
*  FTPC118-02I FTP Client cm=STOR lr=226 cp=1096 cf=21 sa=10.1.160.220
*  sl=10.13.80.11 su=troon ASCII Stream File Seq trs=07:52:04.65
*  dur=00:00:00.02 tbc=5924 rt=296.20kb/sec hst=tso03 stc=AWCPAW
*  dsn=AWCPAW.TEMP.TXT
*
*     Once the WTO is issued the program frees storage for the
*     output area and returns to the operating system with RC=0
*     to allow the SMF record to be written.
*
*     TESTMODE
*     --------
*     In TESTMODE a 32K buffer is allocated for processing the
*     SMF records. The SMFDD DD is opened as an input file
*     and an SMF record is read from it. The chkrec() function is
*     called to verify that it is a valid type 118 FTP record. Type
*     118 subtypes 3 and 70-75 are processed. All other records
*     are ignored and control returns to the system. Rejected
*     records are reported to STDERR output.
*
*     For a valid FTP record an output area is allocated and
*     dartn() is called to format the SMF data to be suitable
*     for output. The data fields are identical to those described
*     above for EXITMODE.
*
*     Once formatted, the data is output to STDOUT via the printf
*     function. The formatting is almost identical to that described
*     above for EXITMODE. The difference being that the data is
*     prefixed by the system and date/time from the SMF record.
*
*     Control then returns back, another SMF record is read
*     and processed and so on until end of file. At EOF the SMFDD
*     is closed, storage is freed and control returns to the operating
*     system.
*
*
*  Environment:
*
*     IBM compatible mainframe
*
*     IBM OS/390, z/OS or subsequent operating system with C compiler
*
*     A minimum level of OS/390 R5 (HTCP340 TCPIP fmid) is required
*     for the SMF formats supported by this program.
*
*     The program has been tested on OS/390 R9 and z/OS 1.2 systems. On
*     z/OS 1.2 a new TCPIP SMF record 119 was introduced. Type 119
*     records are much better strucutured than 118 records and provide
*     IPv6 support and will be the basis for further enhancements by
*     IBM. Type 118 records can be produced in parallel with the 119
*     records for the time being at least.
*
*
*  Compilation:
*
*     EXITMODE & TESTMODE
*     -------------------
*     If the C compiler is available, sample JCL
*     AWCPAW.CBT.FILE600.C.PDS(FTPC118C) can be used to compile the
*     program. 2 object modules are output: FTPC118 for EXITMODE
*     and FTPT118 for TESTMODE.
*
*     The FTPC118 compile is for SPC (Systems Programming C)
*     and must specify the NOSTART option. It must not specify
*     RENT, since RENT is not supported in SPC. The code is naturally
*     re-entrant in any case.
*
*     The FTPT118 compile is a standard C main program compile
*     and can specify TEST for use with the LE debugger.
*
*
*  Installation:
*
*     EXITMODE & TESTMODE
*     -------------------
*     To ensure that SMF 118 FTP records are being created the
*     following tasks must be completed.
*
*      1) For client FTP records ensure that SYS1.TCPPARMS(PROFILE)
*         or equivalent includes this statement.
*
*         SMFCONFIG FTPCLIENT
*
*      2) For all types of server records ensure that
*         SYS1.TCPPARMS(FTPSDATA) or equivalent contains the
*         statements as follows. (SMFJES and SMFSQL are optional)
*
*         SMF           STD       ; SMF records use standard subtypes
*         SMFJES                  ; SMF recording when filetype=jes
*         SMFSQL                  ; SMF recording when filetype=sql
*
*     EXITMODE
*     --------
*     To install the SMF exits for EXITMODE, complete the following.
*
*      1) Ensure type 118 records are being written (above).
*
*      2) Link edit FTPC118 into a linklist library and refresh
*         LLA if necessary. Sample JCL is in
*         AWCPAW.CBT.FILE600.C.PDS(FTPC118L). The FTPC118 load module
*         is used in EXITMODE.
*
*         The FPTC118 link edit must specify CEE.SCEESPC
*         first in its SYSLIB concatenation for SPC support. Object
*         module EDCXSPRT must be explicitly included for the
*         SPC version of the sprintf function. Assembler object modules
*         MLWTO and EDCXFGS should also be included for the mlwto()
*         and malloc()/free() functions respectively.
*
*      3) Optionally install the SMF exit test program FTPCTST
*         which is contained in AWCPAW.CBT.FILE600.ASM.PDS. This
*         program can be used to test the WTO functions of the
*         program before it is installed as an SMF exit.
*
*      4) Ensure that exits IEFU83 and IEFU84 are being called
*         for all address spaces by coding these exits in
*         all SYS or SUBSYS statements in SYS1.PARMLIB(SMFPRMxx) e.g.
*
*         SYS(NOTYPE(..,..,..,..),
*             EXITS(IEFU83,IEFU84,.....,......,),..........,........)
*         SUBSYS(STC,NOTYPE(..,..,..,..),
*             EXITS(IEFU83,IEFU84,.....,......,),..........,........)
*
*         Including the exits in SUBSYS(STC) is required and ommiting
*         it is a likely reason for the exits not being invoked.
*
*         Note that IEFU83 is required for FTP server records
*         whereas IEFU84 is required for client records.
*         It is recommended to install both.
*
*      5) Update SYS1.PARMLIB(PROGxx) to load the exits
*         via the dynamic exit facility, e.g.
*
*         EXIT ADD EXITNAME(SYS.IEFU83) MODNAME(FTPC118)
*         EXIT ADD EXITNAME(SYS.IEFU84) MODNAME(FTPC118)
*
*      6) Dynamically install via the SETPROG operator
*         command e.g.
*
*         SETPROG EXIT,ADD,EXITNAME=SYS.IEFU83,MODNAME=FTPC118
*         SETPROG EXIT,ADD,EXITNAME=SYS.IEFU84,MODNAME=FTPC118
*
*         Or alternatively IPL to activate the exits via PROGxx.
*
*     TESTMODE
*     --------
*     FTPC118 should be link edited into any load library. Sample
*     JCL is in AWCPAW.CBT.FILE600.C.PDS(FTPC118L). The FTPT118 load
*     module is used in TESTMODE.
*
*
*  Invocation:
*
*     EXITMODE
*     --------
*     When installed (as recommended) as both an IEFU83 and IEFU84
*     system SMF exit, the program will be entered for every SMF record
*     written, except those written in cross memory mode that
*     would be processed by IEFU85. (There is no point installing
*     the program as an IEFU85 exit as there are no FTP records
*     written in this mode.)
*
*     In IEFU83/84 the linkage conventions are as follows.
*     (From z/OS MVS Installation Exits SA22-7593-01)
*
*      The contents of the registers on entry to IEFU83/84 are:
*
*      Register  Contents
*      0/2-12    Not applicable
*      1         Address of the parameter list
*      13        Register save area
*      14        Return address
*      15        Entry point address of IEFU84
*
*      Register 1 points to the following address:
*
*      Word 1    The address of the record that SMF is to write. The
*                first four bytes of this record are the
*                record descriptor word.
*
*      Upon return from IEFU83/84 processing, the register contents
*      must be:
*
*      Register  Contents
*      0-14      Same as at entry
*      15        One of the following return codes:
*
*      Value of 4 SMF is not to write the record to the SMF data set.
*      Other than 4 SMF is to write the record to the SMF data set.
*
*     When installed as an FTPSMFEX, which is an alternate
*     entry point, the parameters are slightly different.
*
*      (From z/OS Communications Server IP Configuration Reference
*      SC31-8776-02)
*      On entry to FTPSMFEX, register 1 contains a pointer to the
*      following 2-word parameter list:
*
*      Offset  Value
*      0       Pointer to the return code
*      4       Pointer to the type 118 SMF record
*
*      Prior to calling the SMF user exit, the return code is set to 0.
*      A return code of 0 specifies that the SMF record will be written.
*      To suppress writing the SMF record to the SYS1.MANx data set,
*      the user exit must change the return code to a nonzero value.
*
*
*     The EXITMODE function can be tested by program FTPCTST without
*     installing FTPC118 as an SMF exit. FTPCTST is contained in
*     AWCPAW.CBT.FILE600.ASM.PDS and can be invoked by the JCL
*     in AWCPAW.CBT.FILE600.ASM.PDS(FTPCTSTJ). This JCL requires
*     an SMF input file of type 118 SMF records.
*
*
*     TESTMODE
*     --------
*     In TESTMODE FTPC118 (load module FTPT118) is invoked via
*     batch JCL. Sample JCL can be found in
*     AWCPAW.CBT.FILE600.C.PDS(FTPT118J).
*
*     An extract of SMF type 118 can then be run. Sample JCL is in
*     AWCPAW.CBT.FILE600.C.PDS(SMFX118J).
*
*     The program can then run against the SMF file. Sample JCL is in
*     AWCPAW.CBT.FILE600.C.PDS(FTPT118J).
*
*
*  Notes:
*
*     Writeable static variables cannot be used in SPC mode because it
*     violates reentrancy. This type of variable is statically linked
*     into the program and if modified in SPC mode, an abend0c4 will
*     result.
*
*     In SPC mode, the program runs with #pragma (FTPC118,nolib)
*     which means that the program cannot use any C library functions.
*     This is essential because invocation of library functions may
*     involve external module loads or other SVCs which cannot be
*     tolerated in an SMF exit.
*
*     The record length of this source is greater than 80. The source
*     is best stored in a VB255 PDS.
*
*
*  Author: Paul Wells
*          Saudi Aramco Box 12959
*          Dhahran 31311
*          Saudi Arabia
*
*  Email:  paul.wells@aramco.com
*
*  History:
*
*     PW 22/Jun/2004 - IBM changed SMFFTPTY from binary to EBCDIC with
*                      APAR PQ83055. The code was changed to allow
*                      for both data formats.
*     PW 02/Mar/2004 - Minor fix to dsnrtn and hfsrtn to suppress a
*                      harmless extra space at the end of the dataset
*                      name.
*     PW 30/Mar/2003 - Comments updated
*     PW 18/Sep/2002 - Original
*
*
***********************************************************************/

/* Include standard C header files */
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <limits.h>

#ifndef TESTMODE                       /* Not compiled for TESTMODE? */

 #define EXITMODE                      /* Default compile is EXITMODE (for SMF exit) */
 #pragma runopts("TRAP(OFF),HEAP(8K,32K,ANY),STACK(8K,32K,ANY)")
                                       /* TRAP(OFF) sets ESTAE/ESPIE off for SMF exit
                                          8K for Heap is sufficient in exit mode
                                          8K for Stack is sufficient in exit mode */
 #pragma environment(FTPC118,nolib)    /* Define entry point for
                                          SMF exit. The C library is
                                          not available. */
 #pragma environment(FTPSMFEX,nolib)   /* Define entry point for /
                                          FTP exit. The C library is
                                           not available. */
 #include <spc.h>                      /* SPC headers */

#else

 #include <stdio.h>                    /* File functions used in TESTMODE */
 #include <decimal.h>                  /* Packed decimals used in TESTMODE */

#endif


#if __LIBREL__ < 0x220A0000            /* Pre OS/390 2.10 ? */
 #include "ds118r9.h"                  /* V2.9 TCPIP SMF 118 record */
#else
 #define V2R10                         /* Set 2.10 or above SMF record format */
 #include "ds118r10.h"                 /* V2.10 TCPIP SMF 118 record */
#endif

typedef union {
#ifdef TESTMODE                        /* Compiled for TESTMODE? */
 struct {                              /* 1st union is a mapping for a 32K record buffer in TESTMODE */
  unsigned short int lrecl;            /* Record length */
  unsigned short int seg;
  char iobufferÃ32764Â¨;                /* Record buffer */
 } rec;
#endif
 struct smfheadr hd;                   /* 2nd union in TESTMODE (1st in EXITMODE) is the standard SMF header */
 struct smfftp76 ftp;                  /* 3rd union in TESTMODE (2nd in EXITMODE) is SMF type 118 body */
} SMFREC;

typedef struct {                       /* Output data buffer for WTO or printf */
  unsigned short int len;              /* Length of output */
  char lineÃ3072Â¨;                     /* Output data */
} WTOLINE;

typedef struct {                       /* Structure to map HFS dataset name sections in SMF records */
 unsigned short int hfslen;            /* Length of HFS dataset name */
 char hfsdsÃ1024Â¨;                     /* HFS dataset name */
} HFSDS;

/* Prototype global functions */
char *mnb(char *,const char *,unsigned int);
char *timrtn(char *,unsigned int);
int ftpc118a(SMFREC *);


/* The following functions are defined in SMF exit mode only.*/
#ifdef EXITMODE                        /* Compiled for SMF exit mode? */

void mlwto(WTOLINE *);                 /* Multi-line WTO assembler function */

 #include "div@bsd.h"                  /* Non-library version of div() for EXITMODE.
                                          Required because we cannot call C library functions in an SMF exit.*/
#endif


/* main()/FTPC118()
   Main program entry points */
#ifdef TESTMODE                        /* Compiled for TESTMODE ?*/
int main() {                           /* Standard C entry point for TESTMODE */
#else                                  /* Else SMF exit mode */
int FTPC118() {                        /* FTPC118 entry point for SMF exit mode ? */
#endif

 SMFREC *smfptr;                       /* Pointer to SMF data */
 int rc=0;

#ifdef TESTMODE                        /* Compiled for TESTMODE ?*/
 smfptr=malloc(sizeof(SMFREC));        /* Alloc storage for SMF record */
 if(!smfptr) {                         /* Storage OK ? */
  fprintf(stderr,"FTPC118 - malloc for smfptr %u bytes failed",sizeof(SMFREC));
  return(-1);                          /* Error if sotrage alloc failure */
 }
 rc=ftpc118a(smfptr);                  /* Call SMF record processing routine */
 free(smfptr);                         /* Free the storage */
#else                                  /* Else SMF exit mode */
 smfptr=*(SMFREC **)__xregs(1);        /* In SMF exit SMF record address is pointed to by Reg 1 */
 ftpc118a(smfptr);                     /* Call SMF record processing routine */
#endif

 return(rc);                           /* Return rc (rc only meaningful in TESTMODE) */
}


/* FTPSMFEX()
   Alternate entry point for FTP exit FTPSMFEX */
#ifdef EXITMODE                        /* Compiled for SMF exit mode? */
int FTPSMFEX() {                       /* Alternate entry point for FTP exit FTPSMFEX */

 SMFREC *smfptr;                       /* Pointer to SMF data */

 smfptr=*(((SMFREC **)__xregs(1))+1);  /* In FTPSMFEX SMF record is the 2nd address pointed to by R1 */
 ftpc118a(smfptr);                     /* Call SMF record processing routine */

 return(0);                            /* Always return 0 */
}
#endif


/* ftpc118a()
   Main SMF record processing routine */
int ftpc118a(SMFREC *smfptr) {

 WTOLINE *datline;                     /* Pointer to output data */
 int chkrec(SMFREC *,unsigned int);    /* Prototype function */
 void dartn(SMFREC *,WTOLINE *);       /* Prototype function */

#ifdef TESTMODE                        /* Compiled for TESTMODE ?*/
 unsigned short int lrecl;             /* SMF record length */
 unsigned int recctr=0;                /* Record counter */
 char recflag=0;                       /* FTP record found flag */
 FILE *fp;                             /* File pointer */
#endif

 datline=malloc(sizeof(WTOLINE));      /* GETMAIN output area */

#ifdef TESTMODE                        /* Compiled for TESTMODE ?*/
 fp=fopen("dd:SMFDD","rb,type=record"); /* Open file */
 if(!fp) {
  fprintf(stderr,"FTPC118 - dd:SMFDD open failed\n");
  return(-1);                          /* Error if open not OK */
 }

 do {
  lrecl=fread(smfptr->rec.iobuffer,1,sizeof(smfptr->rec.iobuffer),fp); /* Read SMF input file */
  if(!lrecl) continue;                 /* If no record continue do loop */
  else recctr++;                       /* Increment record count */
  smfptr->rec.lrecl=lrecl+4;           /* Set real record length */
  if(chkrec(smfptr,recctr)) continue;  /* If not valid FTP SMF record, continue do loop */
  else recflag=1;                      /* Set record found flag */
  dartn(smfptr,datline);               /* Format data in the record */
 } while(!feof(fp));                   /* Exit loop at EOF */

 if(!recflag) {                        /* Any calid records found? */
  fprintf(stderr,"FTPC118 - no valid FTP SMF records in dd:SMFDD\n");
  return(4);                           /* Set RC4 if no records */
 }

 fclose(fp);                           /* Close input file */
#endif

#ifdef EXITMODE                        /* Compiled for SMF exit mode? */
 if(chkrec(smfptr,0)) return(0);       /* If not a valid record exit program */
 dartn(smfptr,datline);                /* Format data in the record */
 mlwto(datline);                       /* Call multi-line WTO routine */
#endif

 free(datline);                        /* Free output area */

 return(0);                            /* Normal return RC0 */
}


/* chkrec()
   Check that the SMF record is a valid FTP type 118 record */
int chkrec(SMFREC *sr,unsigned int recctr) {

 int chkreclen1,chkreclen2;

 if(sr->hd.smfhdtyp!=smfhdtcp) {       /* Type 118 record ? */
#ifdef TESTMODE                        /* Compiled for TESTMODE? */
  fprintf(stderr,"FTPC118 - dd:SMFDD record #%u SMF type %u %s",
   recctr,sr->hd.smfhdtyp,"ignored\n");
#endif
  return(1);                           /* Return RC1 (skip) */
 }

 switch(sr->hd.smfhdsub) {             /* Check for FTP subtype */
  case 3: case 70: case 71: case 72: case 73: case 74: case 75:
   break;
  default:                             /* Default not an FTP subtype */
#ifdef TESTMODE                        /* Compiled for TESTMODE? */
   fprintf(stderr,"SMFDD record #%u SMF type %u subtype %u %s",
    recctr,sr->hd.smfhdtyp,sr->hd.smfhdsub,"ignored\n");
#endif
   return(1);                          /* Return RC1 (skip) */
 }

 chkreclen1=(&sr->ftp.smfftpxd)-(sr->ftp.smfftphd);
 if(!(sr->hd.smfhdlen>chkreclen1)) {   /* Check the record length to ignore short records */
#ifdef TESTMODE                        /* Compiled for TESTMODE? */
  fprintf(stderr,"SMFDD record #%u of length %u %s %u%s",
   recctr,sr->hd.smfhdlen,
   "too short (should be >",chkreclen1,")\n");
#endif
  return(1);                           /* Return RC1 (skip) */
 }

#ifdef V2R10                           /* OS/390 2.10 or above ? */
 sr->ftp.smfftpxd==smfftpxs ?
  (chkreclen2=((char *)(&sr->ftp.smfftgig))-(sr->ftp.smfftphd)+
   sizeof(sr->ftp.smfftgig)) :
  (chkreclen2=(sr->ftp.smfftbyf)-(sr->ftp.smfftphd)+
   sizeof(sr->ftp.smfftbyf));
#else                                  /* End record fields are different before V2R10 */
 sr->ftp.smfftpxd==smfftpxs ?
  (chkreclen2=(sr->ftp.smfftslp)-(sr->ftp.smfftphd)+2+2+
   sizeof(sr->ftp.smfftslp)) :
  (chkreclen2=(sr->ftp.smfftslp)-(sr->ftp.smfftphd)+
   sizeof(sr->ftp.smfftslp));
#endif

 if(sr->hd.smfhdlen<chkreclen2) {      /* Check the record length to ignore short records */
#ifdef TESTMODE                        /* Compiled for TESTMODE? */
  fprintf(stderr,"SMFDD record #%u of length %u %s %u%s",
   recctr,sr->hd.smfhdlen,
   "too short (should be >=",chkreclen2,")\n");
#endif
  return(1);                           /* Return RC1 (skip) */
 }

 return(0);                            /* Return RC0 (process) */
}


/* dartn()
   Format the SMF record for WTO/printf */
void dartn(SMFREC *sr,WTOLINE *dl) {

 char *dsnrtn(char *,char *,char *,int,char *,int); /* Prototype function */
 char *hfsrtn(char *,char *,HFSDS *);  /* Prototype function */
 char *testhdr(SMFREC *,char *);       /* Prototype function */

 int linelen;
 double dur,rate,tbc;
 div_t x1;
 unsigned short int len,hfsoff1,hfsoff2;
 HFSDS *hfs1,*hfs2;
 char ch1Ã80Â¨,ch2Ã80Â¨,ch3Ã80Â¨,ch4Ã80Â¨,ch5Ã80Â¨,tbcstrÃ25Â¨,
  outfmÃ7Â¨,outmoÃ11Â¨,outstÃ5Â¨,outdtÃ11Â¨,outratestrÃ25Â¨;
 char *outrate="kb/sec",*dsntag="dsn=",*ds2tag=" ds2=",
  databufÃ4096Â¨,*currbuf=databuf,*ptr1,tbcflag='\0';

#ifdef TESTMODE                        /* Compiled for TESTMODE? */
 len=sprintf(currbuf,                  /* Format system id, date/time for TESTMODE */
  "%s ",testhdr(sr,ch1));
 currbuf+=len;                         /* Bump output buffer */
#endif

 if(sr->ftp.smfftpxd==smfftpxs) {      /* FTP server record ? */
  len=sprintf(currbuf,                 /* Format command */
   "%s %s%s ",
   "FTPC118-01I FTP Server",
   "cm=",mnb(ch1,sr->ftp.smfftpcm,sizeof(sr->ftp.smfftpcm)));
  currbuf+=len;                        /* Bump output buffer */

  if(memcmp(sr->ftp.smfftpcm,"LOGN",4)) { /* Not logon failure ? */
   len=sprintf(currbuf,                 /* Format dataset type */
    "%s%s ",
    "ty=",mnb(ch2,sr->ftp.smfftpty,sizeof(sr->ftp.smfftpty)));
   currbuf+=len;                       /* Bump output buffer */
  }

  len=sprintf(currbuf,                 /* Format last reply, ports */
   "%s%s %s%u %s%u ",
   "lr=",mnb(ch3,sr->ftp.smfftslr,sizeof(sr->ftp.smfftslr)),
   "rp=",*((unsigned short int *)sr->ftp.smfftsrp),
   "lp=",*((unsigned short int *)sr->ftp.smfftslp));
  currbuf+=len;                        /* Bump output buffer */

#ifdef V2R10                           /* OS/390 2.10 or above ? */
  hfsoff1=sr->ftp.smfftof1;
  hfsoff2=sr->ftp.smfftof2;
#else                                  /* End record fields are different before V2R10 */
  hfsoff1=*(((unsigned short int *)(&sr->ftp.smfftslp))+1);
  hfsoff2=*(((unsigned short int *)(&sr->ftp.smfftslp))+2);
#endif
 }
 else {                                /* Else FTP client record */
  len=sprintf(currbuf,                 /* Format command, last reply, ports */
   "%s %s%s ",
   "FTPC118-02I FTP Client",
   "cm=",mnb(ch1,sr->ftp.smfftpcm,sizeof(sr->ftp.smfftpcm)));
  currbuf+=len;                        /* Bump output buffer */

  /* APAR PQ83055 code */
  if(*((unsigned int *)sr->ftp.smfftpty) > 4026531839) {
   len=sprintf(currbuf,                  /* Format last reply */
    "%s%s ",
    "lr=",mnb(ch1,sr->ftp.smfftpty,sizeof(sr->ftp.smfftpty)))            ;
   currbuf+=len;                         /* Bump output buffer */
  }
  else {
   len=sprintf(currbuf,                  /* Format last reply */
    "%s%u ",
    "lr=",*((unsigned int *)sr->ftp.smfftpty));
   currbuf+=len;                         /* Bump output buffer */
  }

  len=sprintf(currbuf,                 /* Format command, last reply, ports */
   "%s%u %s%u ",
   "cp=",*((unsigned short int *)sr->ftp.smfftpcp),
   "cf=",*((unsigned short int *)sr->ftp.smfftpcf));
  currbuf+=len;                        /* Bump output buffer */

  hfsoff1=*((unsigned short int *)sr->ftp.smfftsrp); /* Cleint HFS offsets are different yet again! */
  hfsoff2=*((unsigned short int *)sr->ftp.smfftslp);
 }

 hfsoff1 ?
  (hfs1=(HFSDS *)(((char *)(sr))+hfsoff1)) : /* If there is an HFS, set pointer to it */
  (hfs1=NULL);
 hfsoff2 ?
  (hfs2=(HFSDS *)(((char *)(sr))+hfsoff2)) : /* If there is an HFS, set pointer to it */
  (hfs2=NULL);

#ifdef V2R10                           /* OS/390 2.10 or above ? */
 if(sr->ftp.smfftpxd==smfftpxs) {      /* FTP server record ? */
  if((unsigned int)sr->ftp.smfftgig) { /* TBC > 4Gb ? */
   tbc=*(double *)sr->ftp.smfftbyf;    /* Get TBC from FP value */
   tbcflag=1;                          /* Set > 4Gb flag */
  }
 }
 else {                                /* Else FTP client record */
  if(*((unsigned int *)sr->ftp.smfftbyf+1)) { /* TBC > 4Gb ? */
   tbc=*((double *)&sr->ftp.smfftof1); /* Get TBC from FP value */
   tbcflag=1;                          /* Set > 4Gb flag */
  }
 }
 if(!tbcflag) tbc=(unsigned int)sr->ftp.smffttbc; /* if < 4Gb, use integer value for TBC */
#else
 tbc=(unsigned int)sr->ftp.smffttbc;   /* Always use integer value when not V2R10 */
#endif

 sr->ftp.smffttrs>sr->ftp.smffttre ?   /* Start time > end time ? */
  (dur=sr->ftp.smffttre+(24*60*60*100)-sr->ftp.smffttrs) : /* Yes, assume add a day */
  (dur=sr->ftp.smffttre-sr->ftp.smffttrs); /* No, get duration directly */

 if(dur>0) {                           /* duration > 0 ? */
  rate=(tbc/(dur/100))/1000;           /* Set rate in kb/sec */
  if(rate>=1000) {                     /* Rate > 1000 kb/sec */
   rate/=1000;                         /* Yes, set rate in mb/sec */
   outrate="mb/sec";
  }
 }
 else rate=0;                          /* Else set rate unknown */

/* Different code for EXITMODE and TESTMODE because
   sprintf type FP cannot be used in SPC mode without
   the library. APAR PQ45794 */
#ifdef TESTMODE                        /* Compiled for TESTMODE? */
 if(rate>0) sprintf(outratestr,"%s%.2f%s","rt=",rate,outrate); /* Format rate */
 else strcpy(outratestr,"rt=n/a");
#else
 if(!(rate>0)||((rate*100)>UINT_MAX)) strcpy(outratestr,"rt=n/a"); /* rate*100 exceeds unsigned max ? */
 else {
  x1=div(((unsigned int)(rate*100+.5)),100); /* Determine rate in SMF exit mode */
  sprintf(outratestr,"%s%u.%02u%s","rt=",x1.quot,x1.rem,outrate); /* Format rate */
 }
#endif

 if(memcmp(sr->ftp.smfftpcm,"REN",3)&&
  memcmp(sr->ftp.smfftpcm,"LOGN",4)&&
  memcmp(sr->ftp.smfftpcm,"DELE",4)) { /* Not rename/delete/logon ? */
   switch(sr->ftp.smfftpfm) {          /* Format data format */
    case smfftpfa: strcpy(outfm," ASCII"); break;
    case smfftpfe: strcpy(outfm," EBCDIC"); break;
    case smfftpfi: strcpy(outfm," Bin"); break;
    case 'B': strcpy(outfm," DBCS"); break;
    case 'U': strcpy(outfm," UCS-2"); break;
    default: sprintf(outfm," fm=%c\0",sr->ftp.smfftpfm);
   }
   switch(sr->ftp.smfftpmo) {          /* Format mode */
    case smfftpmb: strcpy(outmo," Block"); break;
    case smfftpmc: strcpy(outmo," Cmprs"); break;
    case smfftpms: strcpy(outmo," Stream"); break;
    default: sprintf(outmo," mo=%c\0",sr->ftp.smfftpmo);
   }
   switch(sr->ftp.smfftpst) {          /* Format structure */
    case smfftpsf: strcpy(outst," File"); break;
    default: sprintf(outst," st=%c\0",sr->ftp.smfftpst);
   }
   switch(sr->ftp.smfftpdt) {          /* Format file type */
    case smfftpdb: strcpy(outdt," Seq"); break;
    case smfftpdp: strcpy(outdt," PDS"); break;
    case 'H': strcpy(outdt," HFS"); break;
    default: sprintf(outdt," dt=%c\0",sr->ftp.smfftpdt);
   }
 }
 else {                                /* Else set nulls */
  *outfm='\0';
  *outmo='\0';
  *outst='\0';
  *outdt='\0';
 }

 len=sprintf(currbuf,                  /* Format IP addrs, userid, file type flags, start time */
  "%s%u.%u.%u.%u %s%u.%u.%u.%u %s%s%s%s"
  "%s%s %s%s ",
  "sa=",*((char *)(&sr->ftp.smfftpsa)),
  *(((char *)(&sr->ftp.smfftpsa))+1),
  *(((char *)(&sr->ftp.smfftpsa))+2),
  *(((char *)(&sr->ftp.smfftpsa))+3),
  "sl=",*((char *)(&sr->ftp.smfftpsl)),
  *(((char *)(&sr->ftp.smfftpsl))+1),
  *(((char *)(&sr->ftp.smfftpsl))+2),
  *(((char *)(&sr->ftp.smfftpsl))+3),
  "su=",mnb(ch1,sr->ftp.smfftpsu,sizeof(sr->ftp.smfftpsu)),
  outfm,outmo,outst,outdt,
  "trs=",timrtn(ch2,sr->ftp.smffttrs));
 currbuf+=len;                         /* Bump output buffer */

 if(memcmp(sr->ftp.smfftpcm,"REN",3)&&
  memcmp(sr->ftp.smfftpcm,"LOGN",4)&&
  memcmp(sr->ftp.smfftpcm,"DELE",4)) { /* Not rename/delete/logon ? */
   len=sprintf(currbuf,
    "%s%s ",
    "dur=",timrtn(ch3,(unsigned int)dur)); /* Format duration */
   currbuf+=len;                       /* Bump output buffer */

/* In V2R10 we can receive byte counts > 4Gb */
#ifdef V2R10                           /* OS/390 2.10 or above ? */
   if(tbcflag) {                       /* TBC > 4Gb ? */
/* Different code for EXITMODE and TESTMODE because
   sprintf type FP cannot be used in SPC mode without
   the library. APAR PQ45794 */
 #ifdef TESTMODE                       /* Compiled for TESTMODE? */
    len=sprintf(currbuf,               /* Format byte count */
     "%s%.2e %s ",
     "tbc=",tbc,
     outratestr);
 #else                                 /* Else SMF exit mode */
    tbc=tbc/(1000*1000*1000);          /* Convert to Gbyte */
    if((tbc*100)>UINT_MAX) strcpy(tbcstr,"tbc=(>4gb)"); /* If exceeds unsigned max, give up */
    else {
     x1=div(((unsigned int)(tbc*100+.5)),100); /* Determine rate in SMF exit mode */
     sprintf(tbcstr,"%s%u.%02u%s","tbc=",x1.quot,x1.rem,"gb"); /* Format rate in Gb */
     len=sprintf(currbuf,              /* Format byte count */
      "%s %s ",
      tbcstr,
      outratestr);
    }
 /* End special bypass floating point SPC code */
 #endif
    currbuf+=len;                      /* Bump output buffer */
   }
   else {                              /* Else, not TBC > 4Gb */
    len=sprintf(currbuf,               /* Format byte count */
     "%s%u %s ",
     "tbc=",sr->ftp.smffttbc,
    outratestr);
    currbuf+=len;                      /* Bump output buffer */
   }
#else                                  /* Else V2R9 or lower */
   len=sprintf(currbuf,                /* Format byte count */
    "%s%u %s ",
    "tbc=",sr->ftp.smffttbc,
    outratestr);
   currbuf+=len;                       /* Bump output buffer */
#endif
 }

 mnb(ch1,sr->ftp.smffthst,sizeof(sr->ftp.smffthst));
 if(ptr1=strchr(ch1,'.')) *ptr1='\0'; /* smffthst may be truncated, so we take 1st qualifier only */

 len=sprintf(currbuf,                  /* Format host name */
  "%s%s ",
  "hst=",ch1);
 currbuf+=len;                         /* Bump output buffer */

 if(sr->ftp.smfftpxd==smfftpxc) {      /* FTP client record ? */
  len=sprintf(currbuf,                 /* Format userid */
   "%s%s ",
   "stc=",mnb(ch1,sr->ftp.smfftstc,sizeof(sr->ftp.smfftstc)));
  currbuf+=len;                        /* Bump output buffer */
 }

 if(memcmp(sr->ftp.smfftpcm,"LOGN",4)) { /* Not logon failure ? */
  if(hfs1&&hfs1->hfslen) {             /* Any HFS 1 ? */
   currbuf+=strlen(hfsrtn(currbuf,dsntag,hfs1)); /* Get HFS 1 */
   if(hfs2&&hfs2->hfslen)              /* Any HFS 2 ? */
    currbuf+=strlen(hfsrtn(currbuf,ds2tag,hfs2)); /* Get HFS 2 */
  }
  else {
   if(*sr->ftp.smfftdsn!=' ') {        /* Any DSN 1 ? */
    currbuf+=strlen(dsnrtn(currbuf,dsntag, /* Get DSN 1 */
     sr->ftp.smfftdsn,sizeof(sr->ftp.smfftdsn),
     sr->ftp.smfftmem,sizeof(sr->ftp.smfftmem)));
    if(*sr->ftp.smfftds2!=' ')          /* Any DSN 2 ? */
     currbuf+=strlen(dsnrtn(currbuf,ds2tag, /* Get DSN 2 */
      sr->ftp.smfftds2,sizeof(sr->ftp.smfftds2),
      sr->ftp.smfftmm2,sizeof(sr->ftp.smfftmm2)));
   }
  }
 }

 *currbuf='\0';                        /* Set end of data */

#ifdef TESTMODE                        /* Compiled for TESTMODE? */
 printf("%s\n",databuf);               /* Output the data */
#endif

 strcpy(dl->line,databuf);             /* Copy data to output buffer */
 dl->len=strlen(dl->line);             /* Set length of data */

return;
}


#ifdef TESTMODE                        /* Compiled for TESTMODE? */
/* testhdr()
   Add the system id and date/time to message for TESTMODE */
char *testhdr(SMFREC *sr,char *out) {

 char *currbuf=out,ch1Ã80Â¨;
 unsigned short int len;
 div_t x1;
 struct tm tim;
 struct tm *datconv(int,int,struct tm *);

 x1=div(*((decimal(7,0) *)sr->hd.smfhddte),1000); /* Get Juilan date stored in packed decimal format */
 datconv(x1.quot,x1.rem,&tim);         /* Convert date to C tm structure format */

 memcpy(currbuf,sr->hd.smfhdsid,sizeof(sr->hd.smfhdsid)); /* Copy system id */
 currbuf+=sizeof(sr->hd.smfhdsid);     /* Bump output buffer */

 len=sprintf(currbuf,                  /* Format system id, date/time for TESTMODE */
  " %u/%02u/%02u %s",
  tim.tm_year+1900,tim.tm_mon+1,tim.tm_mday,
  timrtn(ch1,sr->hd.smfhdtme));
 currbuf+=len;                         /* Bump output buffer */

 return out;
}


/* datconv()
   Convert a date from Julan format into C tm structure format */
struct tm *datconv(int yr,int jd,struct tm *tim) {

 char montabÃ12Â¨={31,28,31,30,31,30,31,31,30,31,30,31};
 char monctr=0;
 int jdctr=1,dyctr=1;

 memset((char *)tim,'\0',sizeof(tim)); /* Initialise tm structure */
 tim->tm_yday=jd-1;
 tim->tm_year=yr;
 yr+=1900;
 if(!(yr%4)&&!(!(yr%100)&&(yr%400))) montabÃ1Â¨=29; /* Set Feb to 29 days on leap years */

 for(;jdctr<=jd;dyctr++,jdctr++) {
  tim->tm_mon=monctr;
  tim->tm_mday=dyctr;
  if(montabÃmonctrÂ¨==dyctr) {
   dyctr=0;
   monctr++;
  }
 }

 return tim;
}
#endif


/* mnb()
   Copy a space delimited string up to a max length */
char *mnb(char *out,const char *in,unsigned int len) {

 char *ptr1=out;

 for(;*in!=' '&&*in&&len;ptr1++,in++,len--) *ptr1=*in;
 *ptr1='\0';

 return out;
}


/* dsnrtn()
   Format a dataset and member name */
char *dsnrtn(char *out,char *dsntag,char *in1,int in1l,
 char *in2,int in2l) {

 char *ptr1=out+strlen(dsntag),*ch1;

 ch1=malloc(in2l+1);
 strcpy(out,dsntag);
 ptr1+=strlen(mnb(ptr1,in1,in1l));
 if(*in2!=' '&&*in2)
  sprintf(ptr1,"(%s)\0",mnb(ch1,in2,in2l));
 else *ptr1='\0';
 free(ch1);

 return out;
}


/* hfsrtn()
   Format a HFS dataset name */
char *hfsrtn(char *currbuf,char *dsntag,HFSDS *hfs) {

 char *ptr=currbuf+strlen(dsntag);

 strcpy(currbuf,dsntag);
 memcpy(ptr,hfs->hfsds,hfs->hfslen);
 ptr+=hfs->hfslen;

 return currbuf;
}


/* timrtn()
   Format a binary time in HH:MM:SS.TH format */
char *timrtn(char *tim_out,unsigned int tim_in) {

 div_t x1,x2,x3;

 x1=div(tim_in,60*60*100);
 x2=div(x1.rem,60*100);
 x3=div(x2.rem,100);
 sprintf(tim_out,"%02u:%02u:%02u.%02u\0",
  x1.quot,x2.quot,x3.quot,x3.rem);

 return tim_out;
}


