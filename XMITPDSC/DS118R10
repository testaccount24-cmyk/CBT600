#pragma pack(packed)

struct smfftp76 {
 unsigned char  smfftphdÝ24¨; /* Standard SMF header with subtypes    */
 unsigned char  smfftpcmÝ4¨;  /* FTP Subcommand                       */
 unsigned char  smfftptyÝ4¨;  /* FTP Server=file type (SEQ, JES, SQL) */
 int            smfftpsa;     /* FTP Server remote IP address   OR    */
 int            smfftpsl;     /* FTP Server local   IP address  OR    */
 unsigned char  smfftpcpÝ2¨;  /* FTP Client local   port              */
 unsigned char  smfftpcfÝ2¨;  /* FTP Client foreign port              */
 unsigned char  smfftpr2Ý4¨;  /* FTP Client reserved                  */
 unsigned char  smfftpsuÝ8¨;  /* FTP Server local  user ID      OR    */
 unsigned char  smfftpfm;     /* FTP data format                      */
 unsigned char  smfftpmo;     /* FTP mode                             */
 unsigned char  smfftpst;     /* FTP structure                        */
 unsigned char  smfftpdt;     /* FTP data set type                    */
 int            smffttrs;     /* FTP start time of transmission       */
 int            smffttre;     /* FTP end   time of transmission       */
 int            smffttbc;     /* FTP byte count of transmission       */
 unsigned char  smfftpxd;     /* FTP ID                               */
 unsigned char  smfftslrÝ3¨;  /* FTP Server - last reply to client    */
 unsigned char  smfftdsnÝ44¨; /* FTP Data Set Name                    */
 unsigned char  smfftmemÝ8¨;  /* FTP member name for PDS              */
 unsigned char  smfftrs2Ý8¨;  /* FTP reserved for abnormal end info.  */
 unsigned char  smfftds2Ý44¨; /* FTP Second Data Set Name (if needed) */
 unsigned char  smfftmm2Ý8¨;  /* FTP Second member name for PDS       */
 unsigned char  smfftstcÝ8¨;  /* FTP Server started task qualifier OR */
 unsigned char  smffthstÝ8¨;  /* FTP TCP/IP Host Name                 */
 unsigned char  smfftsrpÝ2¨;  /* FTP Server Remote port number        */
 unsigned char  smfftslpÝ2¨;  /* FTP Server Local  port number        */
 short int      smfftof1;     /* Offset to the first HFS file field   */
 short int      smfftof2;     /* Offset to the second HFS file field  */
 unsigned char  smfftbyfÝ8¨;  /* Bytes transferred counter in double  */
 void          *smfftgig;     /* 4-Gigabyte counter for bytexfer      */
 unsigned char  smfftvar;     /* Var-length fields                    */
 };

/* Values for field "smfftpfm" */
#define smfftpfa 'A'  /* A = ASCII          */
#define smfftpfe 'E'  /* E = EBCDIC         */
#define smfftpfi 'I'  /* I = Image          */

/* Values for field "smfftpmo" */
#define smfftpmb 'B'  /* B = block          */
#define smfftpmc 'C'  /* C = compressed     */
#define smfftpms 'S'  /* S = stream         */

/* Values for field "smfftpst" */
#define smfftpsf 'F'  /* F = file           */

/* Values for field "smfftpdt" */
#define smfftpdb ' '  /* blank = sequential */
#define smfftpdp 'P'  /* P     = PDS        */

/* Values for field "smfftpxd" */
#define smfftpxc 'C'  /* C = client         */
#define smfftpxs 'S'  /* S = server         */

struct smfheadr {
 short int      smfhdlen;    /* Length of record                */
 short int      smfhdseg;    /* Segment Descriptor              */
 unsigned char  smfhdflg;    /* System Indicator                */
 char           smfhdtyp;    /* Record type number              */
 int            smfhdtme;    /* TOD, Using format from TIME     */
 unsigned char  smfhddteÝ4¨; /* DATE Record written (CCYYDDDS)  */
 unsigned char  smfhdsidÝ4¨; /* SYSTEM Id from Installation     */
 unsigned char  smfhdssiÝ4¨; /* Subsystem identification        */
 short int      smfhdsub;    /* SMF sub type field              */
 unsigned char  smfhdovy;    /* Start of subtype record overlay */
 };

/* Values for field "smfhdflg" */
#define smfhdsty 0x40 /* Subtypes are valid.        */
#define smfhdsp4 0x10 /* MVS/SP Version 4 and above */
#define smfhdsp3 0x08 /* MVS/SP Version 3 and above */
#define smfhdsp2 0x04 /* MVS/SP Version 2 and above */
#define smfhdvs2 0x02 /* MVS/VS2                    */

/* Values for field "smfhdtyp" */
#define smfhdtcp 118  /* Record type number -       */

struct smftriple {
 int            smf3off; /* Offset of section  */
 short int      smf3len; /* Length of section  */
 short int      smf3num; /* Number of sections */
 };

/* Values for field "smf3num" */
#define lsmftriple 0x08 /* Length of SMF Triple */

struct smfsubsys {
 unsigned char  smfsubprocÝ8¨; /* MVSMIBStruct.TcpIpProcName */
 int            smfsubasid;    /* MVSMIBStruct.TcpIpAsid     */
 unsigned char  smfsubtimeÝ8¨; /* MVSMIBStruct.IplTod        */
 unsigned char  smfsubflag;    /* Reason for writing record  */
 unsigned char  _filler1Ý3¨;   /* Reserved                   */
 };

/* Values for field "smfsubflag" */
#define smfrsnstrt 0x80 /* Write first SMF record            */
#define smfrsnintv 0x40 /* Write interval SMF record         */
#define smfrsnend  0x20 /* Write last SMF record             */
#define smfrsnshut 0x10 /* Write SMF record at shutdown      */

/* Values for field "_filler1" */
#define lsmfsubsys 0x18 /* Length of SMF subsystem structure */

struct smfsubip {
 int            imirecv;  /* Total Received Datagrams       */
 int            imihdrer; /* Total Discarded Datagrams      */
 int            imiadrer; /* Total Discarded Addr Errs      */
 int            imifwddg; /* Total Attempt to Fwd Datagrams */
 int            imiunprt; /* Total Discarded Unknown Prot   */
 int            imidisc;  /* Total Discarded Other          */
 int            imidelvr; /* Total Delivered Datagrams      */
 int            imoreqst; /* Total Sent Datagrams           */
 int            imodisc;  /* Total Sent Discarded Other     */
 int            imonorte; /* Total Send Discarded No Route  */
 int            imrsmtos; /* Total Reassembly Timeouts      */
 int            imrsmreq; /* Total Received Reassem. Req'ed */
 int            imrsmok;  /* Total Datagrams Reassembled    */
 int            imrsmfld; /* Total Reassembly Failed        */
 int            imfragok; /* Total Datagrams Fragmented     */
 int            imfrgfld; /* Total Discarded Frag. Failed   */
 int            imfrgcre; /* Total Fragments Generated      */
 int            imrtdisc; /* Total Routing Discards         */
 int            imrsmmax; /* Max active RSMCBs              */
 int            imrsmact; /* Num active RSMCBs              */
 int            imrsmful; /* Reassembly flags               */
 };

/* Values for field "imrsmful" */
#define lsmfsubip 0x54 /* Length of SMF IP structure */

struct smfsubtc {
 int            tcp_rtoalgorithm; /* Retransmit algorithm */
 int            tcp_rtomin;       /* Min Retran time (ms) */
 int            tcp_rtomax;       /* Max Retran time (ms) */
 int            tcp_maxconn;      /* Max connections      */
 int            tcp_activeopens;  /* Active opens         */
 int            tcp_passiveopens; /* Passive opens        */
 int            tcp_attemptfails; /* Open failures        */
 int            tcp_estabresets;  /* Number of resets     */
 int            tcp_currestab;    /* Currently Estabs     */
 int            tcp_insegs;       /* Input segments       */
 int            tcp_outsegs;      /* Output segments      */
 int            tcp_retranssegs;  /* Retransmitted segs   */
 int            tcp_inerrs;       /* Input errors         */
 int            tcp_outrsts;      /* Number of resets     */
 };

/* Values for field "tcp_outrsts" */
#define lsmfsubtc 0x38 /* Length of SMF TCP structure */

struct smfsubud {
 int            usindgrm; /* received datagrams          */
 int            usnoprts; /* dgrms rcvd with no port def */
 int            usinerrs; /* other dgrms not rcvd        */
 int            usotdgrm; /* sent datagrams              */
 };

/* Values for field "usotdgrm" */
#define lsmfsubud 0x10 /* Length of SMF UDP structure */

struct tcpstatentry {
 short int      smf1184len;    /* Record length                   */
 short int      smf1184seg;    /* SMF Seg set to zero/nospan      */
 unsigned char  smf1184flg;    /* Smf flag bit 1 set on           */
 unsigned char  smf1184rty;    /* Smf record type 118             */
 unsigned char  smf1184timÝ4¨; /* time  set by MVS                */
 unsigned char  smf1184datÝ4¨; /* date  set by MVS                */
 unsigned char  smf1184sidÝ4¨; /* system id  set by MVS           */
 unsigned char  smf1184ssiÝ4¨; /* subsystem id  set by MVS        */
 short int      smf1184sty;    /* subtype                         */
 short int      _filler1;      /* reserved                        */
 short int      smf1184sdl;    /* length of self defining section */
 unsigned char  smf1184ssÝ8¨;  /* subsystem section               */
 unsigned char  smf1184ipÝ8¨;  /* IP        section               */
 unsigned char  smf1184icÝ8¨;  /* ICMP      section               */
 unsigned char  smf1184tcÝ8¨;  /* TCP       section               */
 unsigned char  smf1184udÝ8¨;  /* UDP       section               */
 };

/* Values for field "smf1184flg" */
#define smf1184flg_subtype 0x40 /* SMF1184Flg                      */

/* Values for field "smf1184rty" */
#define smf1184rty_type    0x76 /* SMF1184Rty                      */

/* Values for field "smf1184sty" */
#define smf1184sty_type    5    /* SMF1184Sty                      */

/* Values for field "smf1184ud" */
#define lsmf1184sds        0x28 /* length of self defining section */

#pragma pack(reset)
