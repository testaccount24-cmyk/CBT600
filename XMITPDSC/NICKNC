/**********************************************************************
*
*  Name: NICKNC  (C language source)
*
*
*  Abstract:
*
*     A C language program to generate English nicknames. Use it to
*     name your pets, mythical creatures in stories or even your kids!
*
*
*  Operation:
*
*     Run the program in TSO, batch or USS.
*
*
*  Environment:
*
*     IBM compatible mainframe
*
*     IBM OS/390, z/OS or subsequent operating system with C compiler
*
*     May well work on other platforms, but never tried
*
*
*  Compilation:
*
*     Compile with the CCOMP compile member in
*     userid.CBT.FILE600.C.PDS
*
*
*  Installation:
*
*     Link edit with CPRELKDS (load library) or CPRELKHF (HFS) in
*     userid.CBT.FILE600.C.PDS
*
*
*  Invocation:
*
*     Usage: nicknc [-qnw -c nnnn -e nnnn¨
*            -q     quiet mode to suppress titles
*            -n     no nicknames output (useful when debugging
*                   rejected nicknames)
*            -c     count of nicknames output
*            -e     count of rejected nicknames output and overrides -c
*
*
*  Notes:
*
*     This program was the first C program the author ever wrote
*     and was created prior to the birth of my second daughter. She
*     is named Saskia and nicknamed Sassy which was inspired by this
*     very program.
*
*     The program is just a bit of fun and is not being maintained.
*
*
*  Author: Paul Wells
*          Saudi Aramco Box 12959
*          Dhahran 31311
*          Saudi Arabia
*
*  Email:  paul.wells@aramco.com
*
*
*  History:
*
*     PW Aug/2000 - Original
*
*
*
**********************************************************************/
#pragma title("NICKNC - Kids names/nicknames")
#pragma comment(copyright,"NICKNC - ©Paul Wells (Saudi Aramco) 2002")

#define CTR 100                          /* default no. of names */

/* include header files for functions used */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

char l1ranÝ5¨,                           /* 1st-5th sound(s) */
 l2ranÝ5¨,l3ranÝ5¨,l4ranÝ5¨,l5ranÝ5¨;
char *progname="nicknc";
char runflag=0;                          /* run flags (Switches) */
#define rf_namesoff 0x02                 /* no names switch */
#define rf_quiet 0x04                    /* no header switch */
#define rf_ctr 0x08                      /* count parameter passed */
#define rf_ectr 0x10                     /* errcount parameter passed */
#define rf_wrap 0x20                     /* wrap parameter passed */
#define rf_ques 0x40                     /* -? passed */
int count=CTR,errcount=0,errs;           /* counters */


/* main program */
int main(int argc,char *argvÝ¨) {

 int setnames(void);                     /* get names function */
 int parseparms(int,char **);            /* parse switches function */
 time_t tim;                             /* seed for random() */
 int x;

 /*progname=argvÝ0¨;*/                       /* save program name */

 if(parseparms(argc,argv)) {             /* switches OK ? */
  if(!(runflag&rf_ques))                 /* -? on ? */
   fprintf(stderr,"%s Error in parameters\n",progname);
  fprintf(stderr,"Usage: %s Ý-qnw -c nnnn -e nnnn¨\n",progname);
  return -1;                             /* error RC if switches bad */
 }

 if(!(runflag&rf_quiet)) {               /* headers on ? */
  printf("%s Nicknames by Paul Wells\n",progname);
  if(errcount) {                         /* error count specified? */
   if(!(runflag&rf_namesoff))            /* names also included? */
    printf("%s %s",progname,"names to follow\n");
   printf("%s %u errors are listed\n",progname,errcount);
  }
  else if(!(runflag&rf_namesoff))            /* names on ? */
   printf("%s %u%s",progname,count," names to follow\n");
  printf("\n");
 }

 srandom(time(&tim));                   /* seed for random() */

 for(x=0; x!=count;) {                 /* main loop for count names */
  if(errcount&&!(errs<errcount)) break;  /* error count reached ? */
  if(!setnames()) x++;                   /* if name OK, inc ctr */
 }                                     /* end loop for count names */

 return(0);                              /* finished OK */

}


/* parse parameters function */
int parseparms(int argc,char *argvÝ¨) {

 int x=argc-1,retval=0;
 char *ptr;

 if(!x) return retval;                   /* return 0 if no switches */

 for(x=1;x<argc;x++) {                   /* loop through switches */
  if((*argvÝx¨=='-')) {                  /* valid switch ? */
   for(ptr=argvÝx¨+1;*ptr;ptr++) {       /* loop through each switch */
    if(!strcmp(ptr,"c")) {               /* c switch on its own? */
     if(runflag&rf_ectr) {
      retval=1;                          /* set error */
      fprintf(stderr,"%s -e cannot coexist with -c \n",progname);
      break;
     }
     if(runflag&rf_namesoff) {
      retval=1;                          /* set error */
      fprintf(stderr,"%s -n cannot coexist with -c \n",progname);
      break;
     }
     x++;                                /* inc switch count */
     if(x<argc) {                     /* enough switches for count? */
      count=strtoul(argvÝx¨,NULL,10); /* convert count */
      if(!count) {                       /* any count ?*/
       retval=1;                         /* err if no count */
       fprintf(stderr,"%s Invalid count %s \n",progname,argvÝx¨);
      }
      else {
       runflag|=rf_ctr;                  /* set counter specified */
      }
     }
     else {                              /* no count */
      retval=1;                          /* set error */
      fprintf(stderr,"%s No count found for -c \n",progname);
     }
     break;                              /* skip rest of this switch */
    }                                    /* end c switch */
    else if(!strcmp(ptr,"e")) {        /* e switch on its own? */
     x++;                                /* inc switch count */
     if(runflag&rf_ctr) {
      retval=1;                          /* set error */
      fprintf(stderr,"%s -c cannot coexist with -e \n",progname);
      break;
     }
     if(x<argc) {                     /* enough switches for count? */
      errcount=strtoul(argvÝx¨,NULL,10); /* convert err count */
      count=4294967295;                  /* set max names count */
      if(!errcount) {                    /* any count? */
       retval=1;                         /* err if no count */
       fprintf(stderr,"%s Invalid err count %s \n",progname,argvÝx¨);
      }
      else {
       runflag|=rf_ectr;                 /* set errcounter specified */
      }
     }
     else {
      retval=1;
      fprintf(stderr,"%s No err count found for -e \n",progname);
     }
     break;                              /* skip rest of this switch */
    }                                    /* end e switch */
    switch(*ptr) {                       /* select switches */
     case '?':                           /* -? switch?*/
      runflag|=rf_ques;                  /* set ques flag */
      retval=1;                          /* set quit */
      break;                             /* skip */
     case 'w':                           /* wrap switch?*/
      runflag|=rf_wrap;                  /* set wrap flag */
      break;                             /* skip */
     case 'n':                           /* no names switch?*/
      runflag|=rf_namesoff;              /* set no names flag */
      break;                             /* skip */
     case 'q':                           /* quiet switch? */
      runflag|=rf_quiet;                 /* set quiet flag */
      break;                             /* skip */
     default:                            /* all else is error */
      fprintf(stderr,"%s Invalid parameter %s \n",progname,ptr);
      retval=1;
    }
    if(retval) break;                 /* skip rest of switch if error */
   }
   if(retval) break;             /* skip remaining switches if error */
  }
  else {                                  /* not valid switch */
   fprintf(stderr,"%s Invalid parameter %s \n",progname,argvÝx¨);
   retval=1;                              /* set error flag */
   break;                        /* skip remaining switches if error */
  }
 }                                       /* end loop through switches */

 return retval;

}


/* generate names function */
int setnames(void) {

 const char *randlet(const char **);      /* random letter function */
 int exceptions(void);                    /* weed out exceptions func */
 int retval,x;
 char nameoutÝ14¨,ptr;

 /* first consonant (optional) */
 const char *l1Ý¨={
  "b","bl","br","c","ch","cl","cr",
  "d","dr","f","fl","fr",
  "g","gr","h","j","l","m","n",
  "p","pl","pr","qu","r","s","sc",
  "sh","sl","sp","st","sw",
  "t","tr","v","w","y","z","","","","","",
  "\n"
 };

 /* first vowel */
 const char *l2Ý¨={
  "a","e","e","ee","i","i","o","o","oo","u",
  "\n"
 };

 /* second consonant (* denotes non-ender, @ is no "e" ender) */
 const char *l3Ý¨={
  "b","bb*@","bl*","br*@","bs@",
  "ch@","cl*","cr*@","ck@","cks@",
  "d","ds@","dd*@","dr*@","f","ff@",
  "fl*","fr*@","g","gl*","gm*@","gg*@","gr*@","gs@",
  "j","l","lf@","lg","lk@","ll@","lls@","lm@",
  "lp@","lt@","m","mm*@","ms@",
  "n","nd@","ng","nk@","nn*@","ns@","nt@","p",
  "pp*@","ps@","pl*","pr*@",
  "pt@","qu*","r","rb@","rd@","rdg*@","rf@",
  "rg","rk@","rl@","rm@","rn@","rp@","rr*@",
  "rs","rt@","rv","s","sc*@","sh@","sk@","sl*",
  "sp@","ss@","st@","sw*@","t","tr*@","tt*@",
  "ts@","v","vv*@","vl*","vr*@","w","y","z","zz*@",
  "\n"
 };

 /* second vowel (optional) */
 const char *l4Ý¨={
  "a","e","e","y","y","o","oo","","",
  "\n"
 };

 /* third consonant (optional - 1/4) */
 const char *l5Ý¨={
  "b","","","","bs","","","","be","","","","ch","","","",
  "ck","","","","cks","","","",
  "d","","","","de","","","","ds","","","",
  "f","","","","g","","","","ge","","","","gs","","","",
  "dge","","","","l","","","","le","","","","ll","","","",
  "lls","","","","m","","","","me","","","","ms","","","",
  "n","","","","p","","","","pe","","","","ps","","","",
  "pt","","","","r","","","","re","","","","rk","","","","rs","","","",
  "s","","","","","se","","","","sh","","","","sp","","","",
  "ss","","","","st","","","","t","","","","te","","","",
  "ts","","","","ve","","","","ves","","","","w","","","",
  "y","","","","z","","","","ze","","","",
  "\n"
 };

 strcpy(l1ran,randlet(l1));              /* get 1st sound */
 strcpy(l2ran,randlet(l2));              /* get 2nd sound */
 strcpy(l3ran,randlet(l3));              /* get 3rd sound */
 strcpy(l4ran,randlet(l4));              /* get 4th sound */

 /* if 4th is blank, 5th must be blank, else get a 5th sound */
 if (!strcmp(l4ran,"")) strcpy(l5ran,"");  /* - - - "" "" */
 else strcpy(l5ran,randlet(l5));

 /* uncomment these to fix letters for tests */
 /*strcpy(l1ran,"");
 strcpy(l2ran,"ee");
 strcpy(l3ran,"gg*");*/

 retval=exceptions();                    /* evaluate exceptions */

 if(retval) {                            /* word not OK ? */
  if(errcount) {                         /* are we doing errors? */
   fprintf(stderr,"Error%u:%s%s%s%s%s ",
    retval,l1ran,l2ran,l3ran,l4ran,l5ran);
   errs++;                               /* inc err count */
  }
 }
 else if(!(runflag&rf_namesoff)) {       /* are we doing names ? */
  x=sprintf(nameout,"%s%s%s%s%s",l1ran,l2ran,l3ran,l4ran,l5ran);
  if(!(runflag&rf_wrap)) printf("%s\n",nameout);
  else {
   for(;x<sizeof(nameout)-1;nameoutÝx¨=' ',x++); /* pad with spaces */
   nameoutÝx¨='\0';
   printf("%s",nameout);
  }
 }

 return retval;                          /* return RC */

}


/* random sound function */
const char *randlet(const char **rlptr) {

 int element_count(const char **);       /* array element ctr func */
 int rand_mid(int,int);                  /* random no. generator */
 int ran;

 /* get random number in range of array */
 ran = rand_mid(1,element_count(rlptr)),ran--;

 return rlptrÝran¨;                      /* return ptr to sound */

}


/* weed out bad word forms, and strip special chars */
int exceptions(void) {

 int strsame(char *);                 /* double letter finder func */
 char *strrmchr(char *,char);         /* remove char func */
 char *cptr;
 char flag=0;                            /* special chars flag */
 #define fl_3aster 0x01               /* non-ender spec char flag */
 #define fl_3at 0x02                  /* non "e" ender spec char flag */

 /* strip * and set flag */
 if (strchr(l3ran,'*')&&strrmchr(l3ran,'*')) flag|=fl_3aster;
 /* strip @ and set flag */
 if (strchr(l3ran,'@')&&strrmchr(l3ran,'@')) flag|=fl_3at;

 /* - - non-ender - "" */
 if ((flag&fl_3aster)&&!strcmp(l4ran,"")) return 1;

 /* - - w/y y - */
 if ((!strcmp(l3ran,"y")||!strcmp(l3ran,"w"))&&
  !strcmp(l4ran,"y")) return 2;

 /* qu u - - - */
 if (!strcmp(l1ran,"qu")&&!strcmp(l2ran,"u")) return 3;

 /* - i/u w/y - - */
 if ((!strcmp(l3ran,"y")||!strcmp(l3ran,"w"))&&
  (!strcmp(l2ran,"i")||!strcmp(l2ran,"u"))) return 4;

 /* - double-vowel double-consonant - - */
 if (strsame(l2ran)&&strsame(l3ran)) return 5;

 /* - - - double-vowel w/y */
 if ((strsame(l4ran))&&
  (!strcmp(l5ran,"y")||!strcmp(l5ran,"w"))) return 6;

 /* - not-a/o w/y - "" */
 if ((!(!strcmp(l2ran,"a")||!strcmp(l2ran,"o")))&&
  (!strcmp(l3ran,"y")||!strcmp(l3ran,"w"))&&
  !strcmp(l5ran,"")) return 7;

/* - - - y y/w */
  if (!strcmp(l4ran,"y")&&
  (!strcmp(l5ran,"y")||!strcmp(l5ran,"w"))) return 8;

/* - - double e "" */
 if ((flag&fl_3at)&&
  !strcmp(l4ran,"e")&&!strcmp(l5ran,"")) return 9;

 /* - double-vowel w/y - - */
 if ((strsame(l2ran))&&
  (!strcmp(l3ran,"y")||!strcmp(l3ran,"w"))) return 10;

/* - - - y non-blank */
  if (!strcmp(l4ran,"y")&&strcmp(l5ran,""))
   strcpy(l4ran,"i");

/* - - j "" "" */
  if (!strcmp(l3ran,"j")&&!strcmp(l4ran,""))
   strcpy(l3ran,"dge");

/* - - j not-"" - */
  if (!strcmp(l3ran,"j")&&strcmp(l4ran,""))
   strcpy(l3ran,"dg");

/* - double-vowel ck(s) - - */
 if (strsame(l2ran)&&!memcmp(l3ran,"ck",2))
  strcpy(l3ran,l3ran+1);

/* - - - double-vowel ck(s) */
 if (strsame(l4ran)&&!memcmp(l5ran,"ck",2))
  strcpy(l3ran,l3ran+1);

 /* if first sound blank, point to second sound for case change */
 (*l1ran) ? (cptr=l1ran) : (cptr=l2ran);
 ('A'==0xC1) ? (*cptr|=0x40) : (*cptr-=32); /*upper EBCDIC/ASCII*/

 return 0;                               /* return OK */

}

/* array element counter */
int element_count(const char **arptr) {

 int i=0;
 for(; strcmp(arptrÝi¨,"\n"); i++);
 return i;

}


/* double letter detector */
int strsame(char *srptr) {

 int sr=1;
 char *ptr=srptr+1;
 for(; sr&&(*srptr)&&(*ptr); ptr++) sr=(*ptr!=*srptr);
 return !sr;

}


/* random number in range generator */
int rand_mid(int low,int high) {

 return low+random()%(high-low+1);

}


/* remove a character from string */
char *strrmchr(char *string,char target) {

 char *ptr,*str_begin=string;

 for(ptr=string; *string; string++)
  if(*string!=target) *ptr++=*string;
 *ptr='\0';

 return str_begin;

}


