         TITLE 'ANFUXMSG - Infoprint Server Message Exit'
***********************************************************************
*
* Name: ANFUXMSG
*
* Abstract:
*
*    Message exit for the IBM Infoprint Server product.
*    IBM's sample performs a similar function but it makes no
*    effort to format the messages according to their length and
*    content.
*
* Operation:
*
*    Receives log message from product and allows it to
*    be written to the product's dataset log and also
*    WTOs the message out to the console.
*
*    The format of the WTO depends on the length of the message.
*    A message of 126 chars or less will generate a standard WTO,
*    whereas a longer message will generate an MLWTO split
*    into lines of 71 chars. Processing ensures that words
*    of the message are not split over 2 lines.
*
*    Messages can also be suppressed via this exit. (see
*    SUPMSGE)
*
* Environment:
*
*    IBM compatible mainframe (branch relative/immediate instructions
*    must be supported)
*
*    IBM OS/390, z/OS or subsequent operating system
*
*    IBM Infoprint Server product
*
* Assembly:
*
*    Use (userid).CBTxxx.FILE600.ASM.PDS(ASMLKED) or similar to
*    assemble and link this program.
*
* Invocation:
*
*    Place the module in the linklist and Infoprint Server will find
*    it.
*
* Notes:
*
*    The assembler code does not use a base register, so the
*    relative/immediate forms of branch instructions must be used.
*
*
* Author: Paul Wells
*         Saudi Aramco Box 12959
*         Dhahran
*         Saudi Arabia
*
* Email:  paul.wells@aramco.com
*
* History:
*
*    PW 22/Feb/2002 - Original
*    PW 02/Mar/2004 - Fixed bug in GETLEN routine which caused
*                     line length to sometimes be out by 1
*
*
***********************************************************************
*
         MACRO
.* Set CSECT eyecatcher
&NAME    @ID   &@IDN
&NAME    J     @LAB&SYSNDX
         DC    AL1(@LAB&SYSNDX-*)
         AIF   (T'&@IDN EQ 'O').@IDL1
         DC    C'&@IDN '
         AGO   .@IDL2
.@IDL1   ANOP
         DC    C'&SYSECT '
.@IDL2   ANOP
         DC    C'&SYSDATC &SYSTIME &SYSJOB '
         DC    C'&SYSIN_DSN',C'(',C'&SYSIN_MEMBER',C') '
         DC    C'&SYSTEM_ID ',X'B4',C'Paul Wells (Saudi Aramco) 2002 '
@LAB&SYSNDX DS 0H
         MEND
*
         MACRO
.* Execute the next instruction so as not to break the sequence
.* of instructions, in order to preserve readability. We hate it
.* when people execute instructions half a mile away in the code!
&NAME    @EXNEXT &@EXNEXTL
&NAME    LR    15,&@EXNEXTL
         BCTR  15,0
         BASR  14,0
         AHI   14,@EXN&SYSNDX-*
         EX    15,0(,14)
         J     *+10
@EXN&SYSNDX EQU *
         MEND
*
         MACRO
.* Internal subroutine call
&NAME    @BAS  &@BASLOC
         CNOP  2,4
&NAME    BASR  15,0
         AHI   15,@BAS1&SYSNDX-*
         J     @BAS2&SYSNDX
@BAS1&SYSNDX DC A(&@BASLOC)
@BAS2&SYSNDX EQU *
         L     15,0(,15)
         BASR  14,15
         MEND
*
ANFUXMSG CSECT ,                   Establish the csect
ANFUXMSG AMODE 31                  It addresses all storage
ANFUXMSG RMODE ANY                 It can reside anywhere
         @ID   ,
         STM   R14,R12,12(R13)     Save callers registers
         L     R11,0(,R1)          Get address of parm area
         USING ANFUEXTP,R11        R11 is base for parm area
         ST    R13,XTPSAVE+4       chain save areas
         LA    R15,XTPSAVE         get my save area
         ST    R15,8(,R13)         point callers save area to it
         LR    R13,R15             point R13 to my save area
         BASR  R14,0
         USING *,R14
         STORAGE OBTAIN,LENGTH=WORKL
         DROP  R14
         LR    R9,R1
         USING WORKA,R9
         BASR  R12,0               get current location
         AHI   R12,STATIC-*        add offset to static area
         USING STATIC,R12          map static area with R12
         LA    R14,MACROMASKS
         LA    R15,MACROMASKS_LENGTH
         LA    R0,MACROEXECS
         LR    R1,R15
         MVCL  R0,R14
*
         L     R8,XTPMSGP          get pointer to message text
         LA    R3,SUPMSGE
         LA    R4,L'SUPMSGE
         LA    R5,SUPMSGE+SUPMSGL-L'SUPMSGE+1 Point to last entry
         BASR  R6,0
* Instruction following BASR is start of loop
         CLC   0(L'SUPMSGE,R3),0(R8) Suppressed MSG ?
         JE    GETOUT              Skip if yes
         BXLE  R3,R4,0(R6)         Loop through SUPMSGE table
* End of loop
         OI    XTPMSGFL,XTPM2MDS   Set log to dataset
         CLC   XTPMSGLN,=AL2(LINELENS) Fit on single line WTO ?
         JH    MLWTO               Skip if no
         MVC   WTOLINES(2),XTPMSGLN Get length of data
         IC    R3,XTPMSGLN+1       Put len in reg
         @EXNEXT R3                Move data to WTO line
         MVC   WTOLINES+2(0),0(R8) *EXECUTED*
         LA    R3,WTOLINES         Point to WTO line
         SR    R0,R0               Clear R0
         WTO   TEXT=(R3),MF=(E,WTOE1) Issue WTO (single line)
         J     GETOUT              Skip MLWTO
MLWTO    DS    0H
         @BAS  FLINE               Invoke first line processing
         LM    R4,R7,0(R1)         Get saved Regs passed back
         @BAS  RMLINE              Invoke processing for rest of lines
         SR    R0,R0               Clear R0
         WTO   MF=(E,WTOE2)        Issue MLWTO
GETOUT   DS    0H
         PUSH  USING               Save USINGs
         DROP  ,                   Drop all USINGs
         BASR  R14,0               Kilroy woz ere
         USING *,R14               Map 'ere'
         STORAGE RELEASE,LENGTH=WORKL,ADDR=(R9) Free work area
         DROP  R14                 Drop 'ere'
         POP   USING               Get back USINGs
         L     R13,XTPSAVE+4      Get address of caller's save area
         RETURN (14,12)           Restore caller's registers and return
*
* Format the first line of the MLWTO
*
FLINE    DS    0H
         BAKR  R14,0               Stack regs
* Internal Register usage
*  r4 remaining data len
*  r5 pointer to data
*  r2 current line len
*  r6 pointer to next WTO line address pointer (on exit)
*  r7 pointer to next WTO line text location (on exit)
         L     R5,XTPMSGP          get pointer to message text
         SR    R4,R4               clear
         ICM   R4,3,XTPMSGLN       get pointer to message len
         SR    R6,R6               Clear
         IC    R6,WTOE2+8+(WPXLNGTH-WPX) Get len of WPL
         LA    R6,WTOE2+8(R6)      Point to end of WPL
         CL    R4,=A(FLINELEN)     More than a lines worth ?
         JH    FLINE10             Skip if yes
         LR    R2,R4               Set line len to data len
         MVI   0(R6),WPLLTFC+WPLLTFD Set type 'data end' line
         J     FLINE20
FLINE10  DS    0H
         MVI   0(R6),WPLLTFC       Set type 'data' line
         @BAS  GETLEN
         LR    R2,R1               Get Assigned length
FLINE20  DS    0H
         LA    R6,WPLLINES-WPLLTF(,R6) Point to line count in WPL
         MVI   0(R6),1             Set no. of lines so far
         ST    R6,LINESADDR        Save line counter pointer
         LA    R7,WTOLINES         Point to 1st WTO line
         ST    R7,WTOE2+(WPLADTXT-WPL) Save addr in WPL
         STCM  R2,3,0(R7)          Set len of line for WTO
         @EXNEXT R2                Move data into WTO line
         MVC   2(0,R7),0(R5)       *EXECUTED*
         LA    R7,2(R2,R7)         point to next WTO line
         LA    R6,WTOADDRS         point to next WTO line address
         LA    R5,0(R2,R5)         Point past current line in data
         SR    R4,R2               Subtract the line length
FLINEX   DS    0H
         STM   R4,R7,FLINEREG
         LA    R1,FLINEREG
         PR
*
* RMLINE
* Format the second and subsequent lines of the MLWTO
*
RMLINE   DS    0H
         BAKR  R14,0               Stack regs
* Internal Register usage
*  r4 remaining data len
*  r5 pointer to current data
*  r2 current line len
*  r3 number of WTO lines remaining before max reached
*  r6 pointer to WTO line address pointer
*  r7 pointer to WTO line text location
         LTR   R4,R4               any data left ?
         JNP   RMLINEX             Skip if no
         LA    R3,NUMLINES         Get max no. of lines
         BCTR  R3,0                Decrement for 1st line
RMLINE10 DS    0H
         CL    R4,=A(LINELEN)      More than a lines worth left ?
         JH    RMLINE20            Skip if yes
         LR    R2,R4               Set line len to data len
         J     RMLINE30            Skip
RMLINE20 DS    0H
         @BAS  GETLEN              Get preferred len of this line
         LR    R2,R1               Get assigned length
RMLINE30 DS    0H
         @EXNEXT R2                Move data into WTO line
         MVC   2(0,R7),0(R5)       *EXECUTED*
         STCM  R2,3,0(R7)          Set len of line for WTO
         XC    0(8,R6),0(R6)       Clear current WTO address pointer
         MVI   1(R6),8             Set len of ptr to 8
         LTR   R3,R3               last line ?
         JZ    RMLINE40            Skip if yes
         CL    R4,=A(LINELEN)      Last bit of data ?
         JH    RMLINE50            Skip if no
RMLINE40 DS    0H
         OI    2(R6),WPLLTFC+WPLLTFD Set type 'data end' line
         J     RMLINE60            Skip
RMLINE50 DS    0H
         OI    2(R6),WPLLTFC       Set type 'data' line
RMLINE60 DS    0H
         STCM  R7,15,4(R6)         Save addr of current WTO line
         L     R1,LINESADDR        Get pointer to no. of lines
         IC    R15,0(,R1)          Get no. of lines
         LA    R15,1(,R15)         Increment
         STC   R15,0(,R1)          Save no. of lines
         S     R3,=F'1'            Decrement used lines counter
         JM    RMLINEX             Skip if negative
         LA    R7,2(R2,R7)         Point to next WTO line
         LA    R6,8(,R6)           Point to next WTO line address
         LA    R5,0(R2,R5)         Point past current line in data
         SR    R4,R2               Subtract the line length
         JP    RMLINE10            Loop if some data left
RMLINEX  DS    0H
         PR
*
* GETLEN
* Sets length of line up to and including last space/LF/CR.
* The idea is to not split long strings (dataset names) over multiple
* lines.
*
GETLEN   DS    0H
         BAKR  R14,0               Stack regs
* Internal Register usage
*  r5 pointer to current data (must be set on entry)
*  r2 work
*  r1 position of delimiter (TRT) and length of line (on exit)
         LA    R1,LINELEN          Get length of data
         LA    R2,0(R1,R5)         Point past end of data
         BCTR  R2,0                Point to last byte of data
         MVCIN REVLINE,0(R2)       Reverse data
         TRT   REVLINE,TRTAB       Find first (last) delim
         JZ    GETLENX             Skip if no delim found
         LA    R2,REVLINE          Point to reversed data
         SLR   R1,R2               Get offset into data for delim
         LA    R2,LINELEN          Get length of data
         SLR   R2,R1               Get length of data after delim
         LR    R1,R2               Return length in R1
GETLENX  DS    0H
         PR
*
STATIC   DS    0H
MACROMASKS DS  0D
         WTO   TEXT=,LINKAGE=,                                         *
               ROUTCDE=(2,11),DESC=(6),MF=L
         WTO   TEXT=((,D)),LINKAGE=,                                   *
               ROUTCDE=(2,11),DESC=(6),MF=L
MACROMASKS_LENGTH EQU *-MACROMASKS
SUPMSGE  DC    CL9'ANFM602I'
         DC    CL9'ANFM604I'
SUPMSGL  EQU   *-SUPMSGE
FLINELEN EQU   71                  MLWTO first line length (auth)
LINELEN  EQU   71                  MLWTO subsequent line length
NUMLINES EQU   255                 MLWTO max lines (auth)
LINELENS EQU   126                 SLWTO line length (authorised)
TRTAB    DC    XL256'00'
         ORG   TRTAB+X'0A'
         DC    X'FF'
         ORG   TRTAB+X'15'
         DC    X'FF'
         ORG   TRTAB+C' '
         DC    X'FF'
         ORG
         LTORG
*
WORKA    DSECT
MACROEXECS DS  0D
WTOE1    WTO   TEXT=,LINKAGE=,                                         *
               ROUTCDE=(2,11),DESC=(6),MF=L
WTOE2    WTO   TEXT=((,D)),LINKAGE=,                                   *
               ROUTCDE=(2,11),DESC=(6),MF=L
WTOADDRS DS    0F,254AL2,254XL2,254AL4     Contiguous from WTOE2
*
PARMADDR DS    F
LINESADDR DS   F
FLINEREG DS    4F
REVLINE  DS    CL(LINELEN)
WTOLINES DS    AL2,CL(FLINELEN),254AL2,255CL(LINELEN)
*
WORKL    EQU   *-WORKA
*
         DROP  R12,R11,R9
*
         ANFUEXTP                  Infoprint Server DSECT
         IEZWPL ,                  WTO parm list
         YREGS ,                   Register equates
*
         END   ,                   End of ANFUXMSG module
