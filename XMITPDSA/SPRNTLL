         TITLE 'SPRNTLL - LE-Compliant Long Long Integer Print'
***********************************************************************
*
* Name: SPRNTLL
*
* Abstract:
*
*    A function to convert a 64 bit signed integer (Long Long in C) to
*    printable EBCDIC. This is required because Systems
*    Programming C does not support the Long Long type in the
*    sprintf function. (APAR PQ42591)
*
*    Note that this function only works on z/Architecture
*    (or above) processors. On processors without z/Arch a null
*    string will be returned.
*
* Operation:
*
*    2 parameters are passed. The first is the address of the output
*    area for the printable 64 bit integer (min length 21 chars).
*    The second is the 64 bit integer itself (Long Long data type
*    in C). The range of a 64 bit signed integer is
*    -9223372036854775808 to 9223372036854775807. For unsigned
*    integers, only values up to 9223372036854775807
*    (0x7FFFFFFFFFFFFFFF or 63 bits) will be formatted correctly.
*
*    The presence of z/Arch is checked. If not present a null string
*    is returned.
*
*    The 64 bit CVDG instruction is used to convert the integer
*    to decimal, then it is split into 2 portions, unpacked and
*    moved to the output area. Leading zeroes are suppressed.
*
* Invocation:
*
*    From C code, see the example in AWCPAW.CBT.FILE600.C.PDS(SPRNTLLT)
*
*    As a C function, SPRNTLL is usually included in object form
*    via a link edit. For an example see
*    AWCPAW.CBT.FILE600.C.PDS(SPRNTLLC)
*
* Environment:
*
*    IBM compatible mainframe (branch relative/immediate instructions
*    must be supported)
*
*    IBM OS/390, z/OS or subsequent operating system
*
*    Usage of the CVDG/LG/LTGR instructions means that this program
*    requires a minimum of HLASM R4.0 (OS/390 R10) to assemble.
*
* Notes:
*
*    This function does not 'return' the output string, it simply
*    updates the string passed as the first parameter. This means
*    that the returned value cannot be used directly, but instead
*    it must be assigned to a variable. i.e.
*
*        sprntll(ch1,lli1);
*        printf("%s%s\n","64 bit signed integer=",ch1);
*
*    The reason for this is that I couldn't work out how
*    to get an assembler function to return any sort of value, even
*    after trying various return registers.
*
*    The assembler code does not use a base register, so the
*    relative/immediate forms of branch instructions must be used.
*
*    To avoid USING conflicts when we have to temporarily provide
*    a base register for some system macros, a literal pool
*    is not available. Static literals must be placed by name in
*    the 'STATIC' section and referenced via a labeled dependent
*    USING by specifying an ST prefix.
*
*
* Author: Paul Wells
*         Saudi Aramco Box 12959
*         Dhahran
*         Saudi Arabia
*
* Email:  paul.wells@aramco.com
*
* History:
*
*    PW 18/Sep/2002 - Original
*
*
***********************************************************************
*
SPRNTLL  CSECT ,                  Establish the csect
SPRNTLL  AMODE 31                 It addresses all 31 bit storage
SPRNTLL  RMODE ANY                It can reside anywhere
         EDCPRLG BASEREG=NONE,USRDSAL=WORKL
         LR    R11,R1             Get address of parm area
         USING WORKA,R13          Map work area
         L     R6,0(,R11)         Get output area
         TM    X'A3'(0),X'01'     z/architecture present ?
*        TM    FLCARCH-PSA(0),PSAZARCH z/architecture present ?
         JNO   GETOUT             leave the scene if no
MAIN10   DS    0H
         TM    4(R11),X'80'       Is passed integer negative ?
         JNO   MAIN20             Skip if no
         MVI   0(R6),C'-'         Set minus sign
         LA    R6,1(,R6)          Increment output area
MAIN20   DS    0H
         LG    R7,4(,R11)         Get 64 bit integer passed
         LTGR  R7,R7              Zero ?
         JNZ   MAIN30             Skip if no
         MVI   0(R6),C'0'         Set zero in output area
         LA    R6,1(,R6)          Increment output area
         J     GETOUT             Skip
MAIN30   DS    0H
         CVDG  R7,CVDGWK          Convert to decimal (64 bit signed)
         ICM   R5,15,CVDGWK+4     Get first significant digits
         SLL   R5,4               Shift left to accomodate sign
         LA    R5,X'C'(,R5)       Give first part a sign
         STCM  R5,15,CVDGWK       Store in unused part of CVDG area
         UNPK  UNPKWK,CVDGWK(4)   Unpack first bit of 64 bit integer
         OI    UNPKWK+L'UNPKWK-1,X'F0' Fix sign
         MVC   ZDWK(L'UNPKWK),UNPKWK
         UNPK  UNPKWK,CVDGWK+8(8) Unpack rest of 64 bit integer
         OI    UNPKWK+L'UNPKWK-1,X'F0' Fix sign
         MVC   ZDWK+L'UNPKWK(L'UNPKWK-1),UNPKWK+1
         LA    R5,L'ZDWK          Set length of ZDWK
         LA    R4,ZDWK            Point to ZDWK
         SR    R3,R3              Clear significant digit flag
MAIN40   DS    0H
         LTR   R3,R3              Significant digit found ?
         JNZ   MAIN50             Skip if yes
         CLI   0(R4),C'0'         Leading zero ?
         JE    MAIN60             Skip if yes
MAIN50   DS    0H
         LA    R3,1               Set flag for significant digit
         MVC   0(1,R6),0(R4)      Move to output area
         LA    R6,1(,R6)          Increment output area
MAIN60   DS    0H
         LA    R4,1(,R4)          Increment ZDWK ptr
         JCT   R5,MAIN40          Loop thru ZDWK
GETOUT   DS    0H
         MVI   0(R6),0            Set null end of string for C
         EDCEPIL
*
*
WORKA    DSECT
         DS    CL(CEEDSASZ)       LE area
USERDSA  EQU   *
CVDGWK   DS    0D,CL16            Work area for CVDG
UNPKWK   DS    CL16               Work area for UNPK
ZDWK     DS    CL31               Work area for zoned decimal
*
WORKL    EQU   *-USERDSA
*
         DROP  R13
*
         YREGS ,                  Register equates
         CEEDSA ,                 LE Dynamic Storage Area
         IHAPSA ,                 Prefixed Save Area (absolute 0)
         END   ,                  End of SPRNTLL module
