         TITLE 'FTPCTST - Test MLWTO functions of FTPC118/119'
***********************************************************************
*
* Name: FTPCTST
*
* Abstract:
*
*    Test the MLWTO functions of the C SMF exits FTPC118/119. This
*    allows the SMF exit functions of these programs to be tested
*    without installing them as SMF exits.
*
* Operation:
*
*    Passed a single parameter indicating which SMF exit program
*    to call. This will be either FTPC119 (default), FTPC118,
*    FTPSMFEX, or possibly something else.
*
*    For each record in the SMFDD input file, the indicated SMF
*    exit program is directly branched to, passing the SMF record which
*    has been read as a parameter.
*
*    The MLWTO functions of the FTP SMF exits will be invoked and the
*    MLWTOs should appear in the joblog of the job running this
*    program. The output will be in the same format as if
*    the SMF exits been installed.
*
* Environment:
*
*    IBM compatible mainframe (branch relative/immediate instructions
*    must be supported)
*
*    IBM OS/390, z/OS or subsequent operating system
*
* Assembly:
*
*    Use (userid).CBTxxx.FILE600.ASM.PDS(ASMLKED) or similar to
*    assemble and link this program.
*
* Invocation:
*
*    Usually via batch JCL e.g.
*
*     //FTPCTST  EXEC PGM=FTPCTST,PARM=FTPC119
*     //*FTPCTST  EXEC PGM=FTPCTST,PARM=FTPC118
*     //*FTPCTST  EXEC PGM=FTPCTST,PARM=FTPSMFEX
*     //STEPLIB  DD  DISP=SHR,DSN=AWCPAW.CBT.FILE600.LOAD
*     //SMFDD    DD  DISP=SHR,DSN=AWCPAW.CBT.FILE600.SMF119
*     //SYSUDUMP DD  SYSOUT=*
*     //SYSPRINT DD  SYSOUT=*
*     //SYSOUT   DD  SYSOUT=*
*
* Notes:
*
*    This program can run either APF authed or not (the program will
*    check). It is better to run it from an APF authed library
*    as this will test the full length authorised MLWTO functions
*    and the authorised STORAGE subpool used in the SMF exits. if
*    run unauthed the MLWTOs will be 1 character shorter than
*    they would be in an SMF exit.
*
*    The assembler code does not use a base register, so the
*    relative/immediate forms of branch instructions must be used.
*
*    To avoid USING conflicts when we have to temporarily provide
*    a base register for some system macros, a literal pool
*    is not available. Static literals must be placed by name in
*    the 'STATIC' section and referenced via a labeled dependent
*    USING by specifying an ST prefix.
*
*
* Author: Paul Wells
*         Saudi Aramco Box 12959
*         Dhahran
*         Saudi Arabia
*
* Email:  paul.wells@aramco.com
*
* History:
*
*    PW 18/Sep/2002 - Original
*
*
***********************************************************************
*
         MACRO
.* Set CSECT eyecatcher
&NAME    @ID   &@IDN
&NAME    J     @LAB&SYSNDX
         DC    AL1(@LAB&SYSNDX-*)
         AIF   (T'&@IDN EQ 'O').@IDL1
         DC    C'&@IDN '
         AGO   .@IDL2
.@IDL1   ANOP
         DC    C'&SYSECT '
.@IDL2   ANOP
         DC    C'&SYSDATC &SYSTIME &SYSJOB '
         DC    C'&SYSIN_DSN',C'(',C'&SYSIN_MEMBER',C') '
         DC    C'&SYSTEM_ID ',X'B4',C'Paul Wells (Saudi Aramco) 2002 '
@LAB&SYSNDX DS 0H
         MEND
*
         MACRO
.* Execute the next instruction so as not to break the sequence
.* of instructions, in order to preserve readability. We hate it
.* when people execute instructions half a mile away in the code!
&NAME    @EXNEXT &@EXNEXTL
&NAME    LR    15,&@EXNEXTL
         BCTR  15,0
         BASR  14,0
         AHI   14,@EXN&SYSNDX-*
         EX    15,0(,14)
         J     *+10
@EXN&SYSNDX EQU *
         MEND
*
         PUNCH ' SETCODE AC(1)'    Auth me guv'nor
FTPCTST  AMODE 31
FTPCTST  RMODE ANY
FTPCTST  CSECT
         @ID   ,
         STM   R14,R12,12(R13)     Save callers registers
         L     R8,0(,R1)           Get address of parm area
         BASR  R14,0
         USING *,R14               Temp base reg for macro
         STORAGE OBTAIN,LENGTH=WORKL,LOC=BELOW   Getmain work area
         DROP  R14
         ST    R13,4(,R1)          Chain save areas
         ST    R1,8(,R13)
         LR    R13,R1
         USING WORKA,R13           Map work area
         BASR  R12,0               Get current location
         AHI   R12,STATIC-*        Add offset to static area
ST       USING STATIC,R12          Map static area
         LA    R14,ST.MACROMASKS
         LA    R15,MACROMASKS_LENGTH
         LA    R0,MACROEXECS
         LR    R1,R15
         MVCL  R0,R14              Init macro list forms
         MVI   FLAG,0              Clear flag byte
         MVI   PGM,C' '
         MVC   PGM+1(L'PGM-1),PGM  Blank the called PGM
         ICM   R2,3,0(R8)          Did he pass a PGM ?
         JNZ   GETPARM1            Skip if yes
         MVC   PGM,ST.FTPC119      Set default PGM
         J     GETPARM2
GETPARM1 DS    0H
         @EXNEXT R2                Set PGM to call from parm
         MVC   PGM(0),2(R8)        *EXECUTED*
GETPARM2 DS    0H
         LA    R2,DCBE
         ST    R2,SMFDD(DCBDCBE-IHADCB) Save DCBE address in DCB
         OPEN  (SMFDD,(INPUT)),                                        *
               MODE=31,MF=(E,OPENL) Open SMF input file
         TM    SMFDD+(DCBOFLGS-IHADCB),DCBOFOPN Open OK ?
         JO    OPENOK
         WTO   MF=(E,ST.WTOOPERR)  Issue error message
         ABEND 999                 Abend if bad open
OPENOK   DS    0H
         TESTAUTH FCTN=1
         LTR   R15,R15             APF auth ?
         JNZ   NOAUTH              Skip if no
         OI    FLAG,FLAGAPF        Set APF flag
NOAUTH   DS    0H
         LA    R0,PGM              Set PGM to call
         LOAD  EPLOC=(0)           Load PGM in storage
         ST    R0,EP               Save entry point
GETREC1  DS    0H
         GET   SMFDD               Get an SMF record
         SR    R15,R15             Clear offset into PARM
         CLC   ST.FTPSMFEX,PGM     Is it FTPSMFEX ?
         JNE   GETREC2             Skip if no
         LA    R15,4(,R15)         Record is 2nd parm if FTPSMFEX
GETREC2  DS    0H
         ST    R1,PARMS(R15)       Save record address
         TM    FLAG,FLAGAPF        APF ?
         JNO   SKIPMOD1            Skip if no
         BASR  R14,0
         USING *,R14               Temp base reg for macro
         MODESET KEY=ZERO,MODE=SUP Turn on KEY0/SUPV to test auth funcs
         DROP  R14
SKIPMOD1 DS    0H
         L     R15,EP              Get entry point
         LA    R1,PARMS            Get record address
         BALR  R14,R15             Branch to PGM
         TM    FLAG,FLAGAPF        APF ?
         JNO   SKIPMOD2
         BASR  R14,0
         USING *,R14               Temp base reg for macro
         MODESET KEY=NZERO,MODE=PROB Turn off KEY0/SUPV
         DROP  R14
SKIPMOD2 DS    0H
         J     GETREC1             Loop for next record
CLOSEX   DS    0H
         LA    R0,PGM              Get PGM
         DELETE EPLOC=(0)          Delete from storage
         CLOSE (SMFDD),MODE=31,MF=(E,CLOSEL) Close SMF input
EXIT     DS    0H
         L     R2,4(,R13)          Get address of caller's save area
         BASR  R14,0
         USING *,R14               Temp base reg for macro
         STORAGE RELEASE,LENGTH=WORKL,ADDR=(R13) Free work area
         DROP  R14
         LR    R13,R2
         RETURN (14,12),RC=0      Restore caller's registers and return
*
*
STATIC   DS    0D
MACROMASKS DS  0D
         DCB   DDNAME=SMFDD,MACRF=(GL),BUFNO=5,DCBE=0,DSORG=PS
         OPEN  (,),MODE=31,MF=L
         CLOSE (,),MODE=31,MF=L
         DCBE  RMODE31=BUFF,EODAD=CLOSEX
MACROMASKS_LENGTH EQU *-MACROMASKS
WTOOPERR WTO  'FTPCTST-01E Error SMFDD DD failed to open',             X
               ROUTCDE=(2,11),DESC=(4,6),MF=L
FTPC119  DC    CL8'FTPC119'
FTPSMFEX DC    CL8'FTPSMFEX'
*
*
WORKA    DSECT
SAVEA    DS    18F
MACROEXECS DS  0D
SMFDD    DCB   DDNAME=SMFDD,MACRF=(GL),BUFNO=5,DCBE=0,DSORG=PS
OPENL    OPEN  (,),MODE=31,MF=L
CLOSEL   CLOSE (,),MODE=31,MF=L
DCBE     DCBE  RMODE31=BUFF,EODAD=CLOSEX
*
PGM      DS    CL8
EP       DS    F
PARMS    DS    2F
FLAG     DS    X
FLAGAPF  EQU   1
*
WORKL    EQU   *-WORKA
*
*
         YREGS ,
         DCBD  DSORG=PS,DEVD=DA
*
         DROP  R13,ST
         END   FTPCTST
