         TITLE 'HPNSTST - HPNS API IVP'
***********************************************************************
*
* Name: HPNSTST
*
* Abstract:
*
*    A program which runs in batch to 'IVP' TCPIP using the
*    HPNS API. This can be useful to test the TCPIP network setup.
*
* Operation:
*
*    - Accepts an optional port number parameter (default 47319)
*    - Starts a TCPIP HPNS API session.
*    - Shows available TCPIP stacks and status.
*    - Obtains IP address via GETHOSTID.
*    - Obtains short host name via GETHOSTNAME.
*    - Obtains all IP addresses for this host using GETHOSTBYNAME.
*    - Obtains host names for all IP addresses returned in previous
*      GETHOSTBYNAME using GETHOSTBYADDR.
*    - Opens a socket and binds to INADDR_ANY (0.0.0.0).
*    - Opens sockets and binds to all specific IP addresses returned in
*      previous GETHOSTBYNAME.
*    - Ends TCPIP HPNS API session.
*
* Environment:
*
*    IBM compatible mainframe (branch relative/immediate instructions
*    must be supported)
*
*    IBM OS/390, z/OS or subsequent operating system
*
* Assembly:
*
*    Use (userid).CBTxxx.FILE600.ASM.PDS(ASMLKED) or similar to
*    assemble and link this program.
*
* Invocation:
*
*    Usually via batch JCL e.g.
*
*     //HPNSTEST EXEC PGM=HPNSTST
*     //STEPLIB  DD  DISP=SHR,DSN=AWCPAW.CBT.FILE600.LOAD
*     //SYSPRINT DD  SYSOUT=*
*     //SYSUDUMP DD  SYSOUT=*
*     //*$NOWTO   DD  DUMMY      Include to suppress WTO output
*
*
* Sample output:
*
*    Output is via WTO and optionally via the SYSPRINT DD. Messages
*    are prefixed by a message id of the form HPNSTxxI. WTO output
*    can be suppressed via inclusion of $NOWTO DD in JCL.
*
*    e.g.
*
* HPNSTST HPNS test program at 04 Nov 2002 06:54:03 on system TEST
* GETIBMOPT RC=0
* GETIBMOPT returns IP stack 001 named TCPIP at version x'0612' status
*  x'8200' (active)
* INITAPI RC=0
* GETCLIENTID RC=0 returns Task=x'000003BB7F638D58' Name=AWCIP
* GETHOSTID RC=x'0A01A0DC' returns IPA=x.x.x.x
* GETHOSTNAME RC=0 returns Shortname=xxxx
* GETHOSTBYADDR RC=0 using IPA=x.x.x.x returns Hostname=x.x.x.x.x
* GETHOSTBYNAME RC=0 using Host=xxxx
* GETHOSTBYNAME using Host=xxxx returns IPA001=x.x.x.x
* GETHOSTBYNAME using Host=xxxx returns IPA002=x.x.x.x
* GETHOSTBYNAME using Host=xxxx returns IPA003=x.x.x.x
* GETHOSTBYNAME using Host=xxxx returns IPA004=x.x.x.x
* GETHOSTBYNAME using Host=xxxx returns IPA005=x.x.x.x
* GETHOSTBYNAME using Host=xxxx returns IPA006=x.x.x.x
* GETHOSTBYADDR RC=0 using IPA=x.x.x.x returns Hostname=x.x.x.x.x
* GETHOSTBYADDR RC=0 using IPA=x.x.x.x returns Hostname=x.x.x.x.x
* GETHOSTBYADDR RC=0 using IPA=x.x.x.x returns Hostname=x.x.x.x.x
* GETHOSTBYADDR RC=0 using IPA=x.x.x.x returns Hostname=x.x.x.x.x
* GETHOSTBYADDR RC=0 using IPA=x.x.x.x returns Hostname=x.x.x.x.x
* GETHOSTBYADDR RC=0 using IPA=x.x.x.x returns Hostname=x.x.x.x.x
* SOCKET RC=0
* BIND RC=0 to Port=47319 IPA=0.0.0.0
* GETSOCKNAME RC=0 returns Port=47319 IPA=0.0.0.0
* CLOSE RC=0
* SOCKET RC=0
* BIND RC=0 to Port=47319 IPA=x.x.x.x
* GETSOCKNAME RC=0 returns Port=47319 IPA=x.x.x.x
* CLOSE RC=0
* SOCKET RC=0
* BIND RC=0 to Port=47319 IPA=x.x.x.x
* GETSOCKNAME RC=0 returns Port=47319 IPA=x.x.x.x
* CLOSE RC=0
* SOCKET RC=0
* BIND RC=0 to Port=47319 IPA=x.x.x.x
* GETSOCKNAME RC=0 returns Port=47319 IPA=x.x.x.x
* CLOSE RC=0
* SOCKET RC=0
* BIND RC=0 to Port=47319 IPA=x.x.x.x
* GETSOCKNAME RC=0 returns Port=47319 IPA=x.x.x.x
* CLOSE RC=0
* SOCKET RC=0
* BIND RC=0 to Port=47319 IPA=x.x.x.x
* GETSOCKNAME RC=0 returns Port=47319 IPA=x.x.x.x
* CLOSE RC=0
* SOCKET RC=0
* BIND RC=0 to Port=47319 IPA=x.x.x.x
* GETSOCKNAME RC=0 returns Port=47319 IPA=x.x.x.x
* CLOSE RC=0
* TERMAPI RC=(none)
* HPNS API test successful
*
*
* Notes:
*
*    The assembler code does not use a base register, so the
*    relative/immediate forms of branch instructions must be used.
*
*    To avoid USING conflicts when we have to temporarily provide
*    a base register for some system macros, a literal pool
*    is not available. Static literals must be placed by name in
*    the 'STATIC' section and referenced via a labeled dependent
*    USING by specifying an ST prefix.
*
*
* Author: Paul Wells
*         Saudi Aramco Box 12959
*         Dhahran
*         Saudi Arabia
*
* Email:  paul.wells@aramco.com
*
* History:
*
*    PW 10/Jul/2002 - Original
*
***********************************************************************
*
         MACRO
.* Set CSECT eyecatcher
&NAME    @ID   &@IDN
&NAME    J     @LAB&SYSNDX
         DC    AL1(@LAB&SYSNDX-*)
         AIF   (T'&@IDN EQ 'O').@IDL1
         DC    C'&@IDN '
         AGO   .@IDL2
.@IDL1   ANOP
         DC    C'&SYSECT '
.@IDL2   ANOP
         DC    C'&SYSDATC &SYSTIME &SYSJOB '
         DC    C'&SYSIN_DSN',C'(',C'&SYSIN_MEMBER',C') '
         DC    C'&SYSTEM_ID ',X'B4',C'Paul Wells (Saudi Aramco) 2002 '
@LAB&SYSNDX DS 0H
         MEND
*
         MACRO
.* Execute the next instruction so as not to break the sequence
.* of instructions, in order to preserve readability. We hate it
.* when people execute instructions half a mile away in the code!
&NAME    @EXNEXT &@EXNEXTL
&NAME    LR    15,&@EXNEXTL
         BCTR  15,0
         BASR  14,0
         AHI   14,@EXN&SYSNDX-*
         EX    15,0(,14)
         J     *+10
@EXN&SYSNDX EQU *
         MEND
*
         MACRO
.* Internal subroutine call
&NAME    @BAS  &@BASLOC
         CNOP  2,4
&NAME    BASR  15,0
         AHI   15,@BAS1&SYSNDX-*
         J     @BAS2&SYSNDX
@BAS1&SYSNDX DC A(&@BASLOC)
@BAS2&SYSNDX EQU *
         L     15,0(,15)
         BASR  14,15
         MEND
*
         MACRO
.* Init a field (max length 257 chars)
&NAME    @CLEAR &@CLR1,&@CLR2
         AIF   (T'&@CLR2 EQ 'O').@CLR2
&@CLR3   SETC  '&@CLR2'
         AGO   .@CLR3
.@CLR2   ANOP
&@CLR3   SETC  'C'' '''
.@CLR3   ANOP
&NAME    MVI   &@CLR1,&@CLR3
         MVC   &@CLR1+1(L'&@CLR1-1),&@CLR1
         MEND
*
         MACRO
.* Format the RC messages
&NAME    @FMTRC &WRCLIT,&@NONE
&NAME    MVC   RCCALL(L'&WRCLIT),&WRCLIT
         LA    15,L'&WRCLIT
         STC   15,RCCLEN
         AIF   ('&@NONE' EQ 'NOERRNO').@FMTRC10
         MVI   RCEN,0
         AGO   .@FMTRC40
.@FMTRC10 ANOP
         MVI   RCEN,1
.@FMTRC40 ANOP
         @BAS  FMTRC
         MEND
*
         MACRO
.* WTO and PUT out the RC messages
&NAME    @SAYMSG &@SAYM2
&NAME    NOP   0
         AIF   (T'&@SAYM2 EQ 'O').@SAYM2
         MVI   TXTW,0
         LA    15,L'&@SAYM2
         STC   15,TXTW+1
         @EXNEXT 15                Move in call name
         MVC   TXTW+2(0),&@SAYM2   *executed*
.@SAYM2  ANOP
         TM    FLAG,FLAGNWTO       $NOWTO set ?
         JO    @SAY1&SYSNDX        Skip if yes
         WTO   TEXT=TXTW,MF=(E,WTO1) Issue message
@SAY1&SYSNDX DS 0H
         TM    FLAG,FLAGNOF        No SYSPRINT DD ?
         JO    @SAY2&SYSNDX        Skip if yes
         ICM   15,3,TXTW           Get WTO length
         LA    15,4(,15)           Add 4 for RDW
         LA    14,TXTW             Point to start of message
         BCTR  14,0                Decrement
         BCTR  14,0                Decrement
         STCM  15,3,0(14)          Save length in RDW
         XC    2(2,14),2(14)       Clear span indicator in RDW
         LR    0,14                Set record address
         PUT   SYSPRINT,(0)        Put it out
@SAY2&SYSNDX DS 0H
         MEND
*
         MACRO
.* Convert a hex value to printable EBCDIC
&NAME    @HEXCONV &@HXOUT,&@HXIN
&NAME    UNPK  UNPKWORK((L'&@HXIN*2)+1),&@HXIN.(L'&@HXIN+1)
         TR    UNPKWORK(L'&@HXIN*2),ST.HEXTAB-C'0'
         MVC   &@HXOUT.(L'&@HXIN*2),UNPKWORK
         MEND
*
         MACRO
.* Convert an IP address to printable EBCDIC
&NAME    @IPACONV &@IPABIN,&@IPACHR,&@IPALEN
&NAME    LA    R14,&@IPABIN        Set address of input bin IP
         LA    R15,&@IPACHR        Set address of output printable IP
         LA    R0,&@IPALEN         Set address of output length
         STM   R14,R0,IPAPARMS     Save parms
         LA    R1,IPAPARMS         Point to parms
         @BAS  IPACONV             Call IPA convert subroutine
         MEND
*
*
* Start of main CSECT
*
HPNSTST  CSECT ,                   Establish the csect
HPNSTST  AMODE 31                  It addresses all storage
HPNSTST  RMODE ANY                 It can reside anywhere
         @ID   ,                   CSECT eyecatacher
         BAKR  R14,0               Save callers registers
         L     R9,0(,R1)           Get address of parm area
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         STORAGE OBTAIN,LOC=BELOW,LENGTH=WORKL Getmain work area
         DROP  R11                 Drop temp base reg
         LR    R13,R1              Set work area reg
         USING WORKA,R13           Map work area
         BASR  R12,0               Get current location
         AHI   R12,STATIC-*        Add offset to static area
ST       USING STATIC,R12          Map static area with R12
         MVC   4(L'F1SA,R13),ST.F1SA Indicate linkage stack
         @BAS  INIT                Initialise subroutine
         @BAS  IPIBMO              GETIBMOPT subroutine
         @BAS  IPINIT              INITAPI subroutine
         @BAS  IPGCLI              GETCLIENTID subroutine
         @BAS  IPGHI               GETHOSTID subroutine
         @BAS  IPGHN               GETHOSTNAME subroutine
         MVC   IPBINGHBA,IPBIN     Switch IP addresses
         @BAS  IPGHBA              GETHOSTBYADDR subroutine
         @BAS  IPGHBN              GETHOSTBYNAME subroutine
         @BAS  IPSOCK              SOCKET subroutine
         XC    SOCKIPA,SOCKIPA     Set bind to INADDR_ANY 0.0.0.0
         @BAS  IPBIND              BIND subroutine
         @BAS  IPGSKN              GETSOCKNAME subroutine
         @BAS  IPCLOS              CLOSE subroutine
*
* Bind to each IP address returned by GETHOSTBYNAME
*
         LA    R5,MAXIPA           Get max IPs allowed
         LA    R4,GHBNIPAS         Point to start of IPs returned
MAIN10   DS    0H
         ICM   R8,15,0(R4)         Get IP
         JZ    MAIN20              Skip if last
         @BAS  IPSOCK              SOCKET subroutine
         STCM  R8,15,SOCKIPA       Bind to specific IP address
         @BAS  IPBIND              BIND subroutine
         @BAS  IPGSKN              GETSOCKNAME subroutine
         @BAS  IPCLOS              CLOSE subroutine
         LA    R4,4(,R4)           Increment IP table
         JCT   R5,MAIN10           Loop until MAXIPA reached
MAIN20   DS    0H
         @BAS  IPTERM              TERMAPI subroutine
         TM    FLAG,FLAGFAIL       Any failures indicated ?
         JNO   MAIN30              Skip if no
         @SAYMSG ST.MTOTXT09       Output bad message
         LA    R15,12              Set RC 12
         ST    R15,EXITRC          Save exit RC
         J     MAIN40
MAIN30   DS    0H
         @SAYMSG ST.MTOTXT10       Output good message
MAIN40   DS    0H
         TM    FLAG,FLAGNOF        Any SYSPRINT present ?
         JO    MAIN50              Skip close if no
         CLOSE (SYSPRINT),MODE=31,MF=(E,CLOSEL)
MAIN50   DS    0H
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         STORAGE RELEASE,LENGTH=WORKL,ADDR=(R13) Free work area
         DROP  R11                 Drop temp base reg
         L     R15,EXITRC          Get back RC
         PR    ,                   Restore R2-R14 and return
*
* Initialise work area and generate start message
*
INIT     DS    0H
         BAKR  R14,0               Save regs on stack
         LA    R14,ST.MACROMASKS
         LA    R15,MACROMASKS_LENGTH
         LA    R0,MACROEXECS
         LR    R1,R15
         MVCL  R0,R14              Initialise macro masks
         XC    HNAM2L(L'HNAM2L+1),HNAM2L Clear host name
         MVI   FLAG,0              Clear flag
         XC    EXITRC,EXITRC       Clear exit RC
         LTR   R9,R9               Any port number parm ?
         JZ    INIT10              Skip if no
         SR    R1,R1
         ICM   R1,1,1(R9)          Get length of parm
         JZ    INIT10              Skip if zero
         LA    R5,5
         CLR   R1,R5               Parm longer than 5 ?
         JH    INIT10              Skip if yes
         @EXNEXT R1                Convert parm to packed decimal
         PACK  DWORD,2(0,R9)       *executed*
         CVB   R15,DWORD           Convert to binary
         STCM  R15,3,PORT          Save requested port number
         J     INIT20
INIT10   DS    0H
         MVC   PORT,ST.PORTD       Use default port
INIT20   DS    0H
         DEVTYPE ST.DD$NOWTO,DWORD Check for $NOWTO DD
         LTR   R15,R15             $NOWTO DD present ?
         JNZ   INIT30              Skip if no
         OI    FLAG,FLAGNWTO       Set flag to suppress WTOs
INIT30   DS    0H
         DEVTYPE ST.DDSYSPRT,DWORD Check for message DD
         LTR   R15,R15             Message DD present ?
         JNZ   INIT40              Skip if no
         MVC   SYSPRINT+(DCBDDNAM-IHADCB)(L'DDSYSPRT),ST.DDSYSPRT
         OPEN  (SYSPRINT,(OUTPUT)),                                    *
               MODE=31,MF=(E,OPENL)
         TM    SYSPRINT+(DCBOFLGS-IHADCB),DCBOFOPN Open OK ?
         JO    INIT50              Skip if yes
INIT40   DS    0H
         OI    FLAG,FLAGNOF        Set flag for no message DD
INIT50   DS    0H
         @CLEAR TXTW               Clear message text
         MVI   TXTW,0              Set unused 1st byte to zero
         LA    R6,TXTW+2           Get message start
         MVC   0(L'MTOID02,R6),ST.MTOID02 Move in start of message
         LA    R6,L'MTOID02+1(,R6)   Bump length
         ICM   R7,15,PSATOLD-PSA   Get current TCB
         JZ    INIT80              Skip if none
         ICM   R7,15,TCBRBP-TCB(R7) Get current RB
         JZ    INIT80              Skip if none
         LA    R8,RBBASIC-RBPRFX   Length of RB prefix
         SLR   R7,R8               Back up to RB prefix
         ICM   R7,15,RBCDE-RBPRFX(R7) Get current CDE
         JZ    INIT80              Skip if none
         LA    R2,L'CDNAME         Max length of program name
         LA    R7,CDNAME-CDENTRY(,R7) Point to program name
INIT60   DS    0H
         CLI   0(R7),C' '          Found a space ?
         JE    INIT70              If yes, then its end of prog name
         MVC   0(1,R6),0(R7)       Save the character into message
         LA    R7,1(,R7)           Bump source position
         LA    R6,1(,R6)           Bump target
         JCT   R2,INIT60           Loop until end of program name
INIT70   DS    0H
         LA    R6,1(,R6)           Bump length
INIT80   DS    0H
         MVC   0(L'SIGLIT,R6),ST.SIGLIT Move in literal
         LA    R6,L'SIGLIT(,R6)    Bump length
         TIME  DEC,USECSTOD,ZONE=LT,LINKAGE=SYSTEM,DATETYPE=DDMMYYYY,  *
               MF=(E,TIMEL)
         LTR   R15,R15             Bad RC ?
         JNZ   INIT90              Skip if yes
         SR    R8,R8               Clear
         SR    R9,R9               Clear
         ICM   R8,15,USECSTOD+8    Get DDMMYYYY
         SRDL  R8,4                Shift right 4 nibbles
         STM   R8,R9,PDATE         Store
         OI    PDATE+4,X'0C'       Make packed
         MVC   DATEOUT,ST.DATEMASK Set ED mask
         ED    DATEOUT,PDATE       Convert to printable
         MVC   1(3,R6),DATEOUT+1   Move in DD/
         MVC   7(5,R6),DATEOUT+6   Move in /YYYY
         SR    R9,R9               Clear
         ICM   R9,1,USECSTOD+9     Get month
         BCTR  R9,0                Decrement
         MH    R9,ST.HWTHREE       x3
         LA    R8,ST.MONTAB(R9)    Offset into month table
         MVC   4(3,R6),0(R8)       Move in month
         LA    R6,12(,R6)          Bump length
         SR    R8,R8               Clear
         ICM   R8,7,USECSTOD       Get HHMMSS
         SLL   R8,4                Shift left 4 nibbles
         ST    R8,PTIME            Store
         OI    PTIME+3,X'0C'       Make packed
         MVC   0(L'TIMEMASK,R6),ST.TIMEMASK Set ED mask
         ED    0(L'TIMEMASK,R6),PTIME Convert to printable
         MVI   0(R6),C' '          Fix space
         LA    R6,L'TIMEMASK(,R6)  Bump target
INIT90   DS    0H
         LA    R6,1(,R6)           Bump target
         MVC   0(L'SYSLIT,R6),ST.SYSLIT Move in literal
         LA    R6,L'SYSLIT(,R6)    Bump length
         L     R7,CVTPTR           Point to CVT
         MVC   0(L'CVTSNAME,R6),CVTSNAME-CVT(R7) Get system name
         LA    R6,L'CVTSNAME(,R6)  Bump length
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
         @SAYMSG ,                 Output message to SYSPRINT and cons
INITX    DS    0H
         PR    ,                   Restore R2-R14 and return
*
* GETIBMOPT subroutine
*
IPIBMO   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=GETIBMOPT,                                        *
               COMMAND=1,                                              *
               BUF=IBMOBUF,                                            *
               ERRNO=ERRNO,                                            *
               RETCODE=RETCODE
         DROP  R11                 Drop temp base reg
         @FMTRC ST.GETIBMOPT       Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPIBMO10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPIBMO10 DS    0H
         @SAYMSG ,                 Output message to SYSPRINT and cons
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JE    IPIBMOX             Skip if yes
         ICM   R4,15,IBMOBUF       Any info returned ?
         JZ    IPIBMOX             Skip if no
         SR    R2,R2
         LA    R3,IBMOBUF+4
IPIBMO20 DS    0H
         LA    R2,1(,R2)
         @CLEAR TXTW               Clear message text
         MVI   TXTW,0              Set unused 1st byte to zero
         LA    R6,TXTW+2           Get message start
         MVC   0(L'MTOID01,R6),ST.MTOID01 Move in start of message
         LA    R6,L'MTOID01(,R6)   Bump length
         CVD   R2,DWORD            Convert to packed decimal
         UNPK  0(3,R6),DWORD+7(1)  Convert to zoned decimal
         OI    2(R6),X'F0'         Fix sign
         LA    R6,4(,R6)           Bump length
         MVC   0(L'NAMLIT,R6),ST.NAMLIT Move in literal
         LA    R6,L'NAMLIT(,R6)    Bump length
         LA    R9,8                Max length of IP stack name
         LA    R1,4(,R3)           Point to start of IP stack name
IPIBMO25 DS    0H
         CLI   0(R1),C' '          Found a space ?
         JE    IPIBMO30            If yes, then its end of stack name
         MVC   0(1,R6),0(R1)       Save the character into message
         LA    R1,1(,R1)           Bump source position
         LA    R6,1(,R6)           Bump target
         JCT   R9,IPIBMO25         Loop until end of stack name
IPIBMO30 DS    0H
         LA    R6,1(,R6)           Bump length
         MVC   0(L'VERLIT,R6),ST.VERLIT Move in literal
         LA    R6,L'VERLIT(,R6)    Bump length
         MVC   IBMOTM2,2(R3)       Save version of stack
         @HEXCONV IBMOTM1,IBMOTM2  Convert to printable EBCDIC
         MVC   0(L'IBMOTM1,R6),IBMOTM1 Put in message
         LA    R6,L'IBMOTM1(,R6)   Bump length
         MVI   0(R6),C''''
         LA    R6,2(,R6)           Bump length
         MVC   0(L'STALIT,R6),ST.STALIT Move in literal
         LA    R6,L'STALIT(,R6)    Bump length
         MVC   IBMOTM2,0(R3)       Save status of stack
         @HEXCONV IBMOTM1,IBMOTM2  Convert to printable EBCDIC
         MVC   0(L'IBMOTM1,R6),IBMOTM1 Put in message
         LA    R6,L'IBMOTM1(,R6)   Bump length
         MVI   0(R6),C''''
         LA    R6,2(,R6)           Bump length
         SR    R7,R7               Clear
         IC    R7,0(,R3)           Get 1st byte of status
         SRL   R7,4                Lose 2nd nibble
         LA    R8,8
         CLR   R7,R8               Exceeds our branch table ?
         JH    IPIBMO40            Skip if yes
         SLL   R7,2                x4
         BASR  R9,0                Kilroy woz ere
         AHI   R9,IPIBMOBT-*       Set base of branch table
         B     0(R7,R9)            Branch according to status
IPIBMOBT DS    0H                  Branch table for status code
         J     IPIBMOCU            Status x'0xxx'
         J     IPIBMOC1            Status x'1xxx'
         J     IPIBMOC2            Status x'2xxx'
         J     IPIBMOC3            Status x'3xxx'
         J     IPIBMOC4            Status x'4xxx'
         J     IPIBMOCU            Status x'5xxx'
         J     IPIBMOCU            Status x'6xxx'
         J     IPIBMOCU            Status x'7xxx'
         J     IPIBMOC8            Status x'8xxx'
IPIBMOCU DS    0H
         MVC   0(L'IBMOUNKN,R6),ST.IBMOUNKN Set unknown status
         LA    R6,L'IBMOUNKN(,R6)  Bump length
         J     IPIBMO40
IPIBMOC1 DS    0H
         MVC   0(L'IBMOSTOP,R6),ST.IBMOSTOP Set stopped status
         LA    R6,L'IBMOSTOP(,R6)  Bump length
         J     IPIBMO40
IPIBMOC2 DS    0H
         MVC   0(L'IBMODOWN,R6),ST.IBMODOWN Set down status
         LA    R6,L'IBMODOWN(,R6)  Bump length
         J     IPIBMO40
IPIBMOC3 DS    0H
         MVC   0(L'IBMOABND,R6),ST.IBMOABND Set abend status
         LA    R6,L'IBMOABND(,R6)  Bump length
         J     IPIBMO40
IPIBMOC4 DS    0H
         MVC   0(L'IBMOTERM,R6),ST.IBMOTERM Set terminating status
         LA    R6,L'IBMOTERM(,R6)  Bump length
         J     IPIBMO40
IPIBMOC8 DS    0H
         MVC   0(L'IBMOACT,R6),ST.IBMOACT Set active status
         LA    R6,L'IBMOACT(,R6)   Bump length
*
IPIBMO40 DS    0H
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
         @SAYMSG ,                 Output message to SYSPRINT and cons
         LA    R3,12(,R3)          Point to info for next stack
         JCT   R4,IPIBMO20         Loop for all stacks found
IPIBMOX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* INITAPI subroutine
*
IPINIT   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=INITAPI,                                          *
               MAXSOC=50,                                              *
               MAXSNO=MAXSNO,                                          *
               ERRNO=ERRNO,                                            *
               RETCODE=RETCODE,                                        *
               APITYPE=2,                                              *
               ASYNC='NO'
         DROP  R11                 Drop temp base reg
         @FMTRC ST.INITAPI         Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPINIT10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPINIT10 DS    0H
         @SAYMSG ,                 Output message to SYSPRINT and cons
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JE    ABENDFAIL           Skip if yes
IPINITX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* TERMAPI subroutine
*
IPTERM   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=TERMAPI
         DROP  R11                 Drop temp base reg
         @FMTRC ST.TERMAPI,NOERRNO Format the RC
         MVC   TXTW+22(L'NONELIT),ST.NONELIT No RC so we say (none)
         IC    R5,TXTW+1
         LA    R5,L'NONELIT-1(,R5) Fix length of WTO
         STC   R5,TXTW+1           Save length of WTO
         @SAYMSG ,                 Output message to SYSPRINT and cons
IPTERMX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* SOCKET subroutine
*
IPSOCK   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=SOCKET,                                           *
               AF='INET',                                              *
               ERRNO=ERRNO,                                            *
               RETCODE=RETCODE,                                        *
               SOCTYPE='STREAM'
         DROP  R11                 Drop temp base reg
         @FMTRC ST.SOCKET          Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPSOCK10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPSOCK10 DS    0H
         @SAYMSG ,                 Output message to SYSPRINT and cons
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JE    ABENDFAIL           Skip if yes
         MVC   SOCKDES,RETCODE+2
IPSOCKX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* GETSOCKNAME subroutine
*
IPGSKN   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=GETSOCKNAME,                                      *
               S=SOCKDES,                                              *
               ERRNO=ERRNO,                                            *
               RETCODE=RETCODE,                                        *
               NAME=SOCKNAME
         DROP  R11                 Drop temp base reg
         @FMTRC ST.GETSOCKNAME     Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPGSKN10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPGSKN10 DS    0H
         SR    R5,R5               Clear R5
         IC    R5,TXTW+1           Get length of message so far
         LA    R6,TXTW+2+1(R5)     Point to end of message (+ 1 space)
         MVC   0(L'RETLIT,R6),ST.RETLIT Move in literal
         LA    R6,L'RETLIT(,R6)    Bump length
         MVC   0(L'PORTLIT,R6),ST.PORTLIT Move in literal
         LA    R6,L'PORTLIT(,R6)   Bump length
         SR    R9,R9
         ICM   R9,3,SOCKPORT
         CVD   R9,DWORD            Convert to packed decimal
         UNPK  0(5,R6),DWORD+5(3)  Convert to zoned decimal
         OI    4(R6),X'F0'         Fix sign
         LA    R6,6(,R6)           Bump length
         MVC   0(L'IPALIT,R6),ST.IPALIT Move in literal
         LA    R6,L'IPALIT(,R6)    Bump length
         @IPACONV SOCKIPA,0(,R6),IPAGSKNL Convert IP to printable
         SR    R3,R3
         IC    R3,IPAGSKNL
         LA    R6,0(R3,R6)         Bump length
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
         @SAYMSG ,                 Output message to SYSPRINT and cons
IPGSKNX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* GETCLIENTID subroutine
*
IPGCLI   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=GETCLIENTID,                                      *
               ERRNO=ERRNO,                                            *
               RETCODE=RETCODE,                                        *
               CLIENT=CLISTR
         DROP  R11                 Drop temp base reg
         @FMTRC ST.GETCLIENTID     Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPGCLI10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPGCLI10 DS    0H
         SR    R5,R5               Clear R5
         IC    R5,TXTW+1           Get length of message so far
         LA    R6,TXTW+2+1(R5)     Point to end of message (+ 1 space)
         MVC   0(L'RETLIT,R6),ST.RETLIT Move in literal
         LA    R6,L'RETLIT(,R6)    Bump length
         MVC   0(L'TASKLIT,R6),ST.TASKLIT Move in literal
         LA    R6,L'TASKLIT(,R6)   Bump length
         @HEXCONV GCLIWORK,CLITASK1 Convert to printable EBCDIC
         MVC   0(L'GCLIWORK,R6),GCLIWORK
         LA    R6,L'GCLIWORK(,R6)  Bump length
         @HEXCONV GCLIWORK,CLITASK2 Convert to printable EBCDIC
         MVC   0(L'GCLIWORK,R6),GCLIWORK
         MVI   L'GCLIWORK(R6),C''''
         LA    R6,L'GCLIWORK+2(,R6) Bump length
         MVC   0(L'NAMELIT,R6),ST.NAMELIT Move in literal
         LA    R6,L'NAMELIT(,R6)   Bump length
         MVC   0(L'CLINAME,R6),CLINAME
         LA    R6,L'CLINAME(,R6)   Bump length
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
         @SAYMSG ,                 Output message to SYSPRINT and cons
IPGCLIX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* BIND subroutine
*
IPBIND   DS    0H
         BAKR  R14,0               Save regs on stack
         LA    R15,2
         STC   R15,SOCKFAM+1
         MVC   SOCKPORT,PORT
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=BIND,                                             *
               S=SOCKDES,                                              *
               ERRNO=ERRNO,                                            *
               RETCODE=RETCODE,                                        *
               NAME=SOCKNAME
         DROP  R11                 Drop temp base reg
         @FMTRC ST.BIND            Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPBIND10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPBIND10 DS    0H
         SR    R5,R5               Clear R5
         IC    R5,TXTW+1           Get length of message so far
         LA    R6,TXTW+2+1(R5)     Point to end of message (+ 1 space)
         MVC   0(L'TOLIT,R6),ST.TOLIT Move in literal
         LA    R6,L'TOLIT(,R6)     Bump length
         MVC   0(L'PORTLIT,R6),ST.PORTLIT Move in literal
         LA    R6,L'PORTLIT(,R6)   Bump length
         SR    R9,R9
         ICM   R9,3,SOCKPORT
         CVD   R9,DWORD            Convert to packed decimal
         UNPK  0(5,R6),DWORD+5(3)  Convert to zoned decimal
         OI    4(R6),X'F0'         Fix sign
         LA    R6,6(,R6)           Bump length
         MVC   0(L'IPALIT,R6),ST.IPALIT Move in literal
         LA    R6,L'IPALIT(,R6)    Bump length
         @IPACONV SOCKIPA,0(,R6),IPABINDL Convert IP to printable
         SR    R3,R3
         IC    R3,IPABINDL
         LA    R6,0(R3,R6)         Bump length
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
         @SAYMSG ,                 Output message to SYSPRINT and cons
IPBINDX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* CLOSE subroutine
*
IPCLOS   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=CLOSE,                                            *
               ERRNO=ERRNO,                                            *
               RETCODE=RETCODE,                                        *
               S=SOCKDES
         DROP  R11                 Drop temp base reg
         @FMTRC ST.CLOSE           Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPCLOS10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPCLOS10 DS    0H
         @SAYMSG ,                 Output message to SYSPRINT and cons
IPCLOSX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* GETHOSTID subroutine
*
IPGHI    DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=GETHOSTID,                                        *
               RETCODE=RETCODE
         DROP  R11                 Drop temp base reg
         @FMTRC ST.GETHOSTID,NOERRNO Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPGHI10             Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
         J     IPGHI20
IPGHI10  DS    0H
         MVC   IPBIN,RETCODE       Save IP
         @IPACONV IPBIN,IPA,IPAL   Convert IP to printable
         SR    R5,R5               Clear R5
         IC    R5,TXTW+1           Get length of message so far
         LA    R6,TXTW+2+1(R5)     Point to end of message (+ 1 space)
         MVC   0(L'RETLIT,R6),ST.RETLIT Move in literal
         LA    R6,L'RETLIT(,R6)    Bump length
         MVC   0(L'IPALIT,R6),ST.IPALIT Move in literal
         LA    R6,L'IPALIT(,R6)    Bump length
         SR    R7,R7
         IC    R7,IPAL             Get IP length
         @EXNEXT R7                Move in IP
         MVC   0(0,R6),IPA         *executed*
         LA    R6,0(R7,R6)         Bump length
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
IPGHI20  DS    0H
         @SAYMSG ,                 Output message to SYSPRINT and cons
IPGHIX   DS    0H
         PR    ,                   Restore R2-R14 and return
*
* GETHOSTNAME subroutine
*
IPGHN    DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         XC    FWORD,FWORD
         LA    R6,L'HNAM2
         STC   R6,FWORD+3
         EZASMI TYPE=GETHOSTNAME,                                      *
               NAMELEN=FWORD,                                          *
               NAME=HNAM2,                                             *
               ERRNO=ERRNO,                                            *
               RETCODE=RETCODE
         DROP  R11                 Drop temp base reg
         @FMTRC ST.GETHOSTNAME     Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPGHN10             Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
         J     IPGHN30
IPGHN10  DS    0H
         SR    R5,R5               Clear R5
         IC    R5,TXTW+1           Get length of message so far
         LA    R6,TXTW+2+1(R5)     Point to end of message (+ 1 space)
         MVC   0(L'RETLIT,R6),ST.RETLIT Move in literal
         LA    R6,L'RETLIT(,R6)    Bump length
         MVC   0(L'HNLIT,R6),ST.HNLIT Move in literal
         LA    R6,L'HNLIT(,R6)     Bump length
         SR    R0,R0               Set search for x'00'
         LA    R8,HNAM2            Start of search
IPGHN20  DS    0H
         SRST  R0,R8               Search for character
         JO    IPGHN20             Loop until end of search
         LA    R8,HNAM2
         SR    R0,R8               Length of hostname in R0
         STC   R0,HNAM2L           Set hostname length
         LR    R7,R0
         @EXNEXT R7                Move in hostname
         MVC   0(0,R6),HNAM2       *executed*
         LA    R6,0(R7,R6)         Bump length
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
IPGHN30  DS    0H
         @SAYMSG ,                 Output message to SYSPRINT and cons
IPGHNX   DS    0H
         PR    ,                   Restore R2-R14 and return
*
* GETHOSTBYADDR subroutine
*
IPGHBA   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         EZASMI TYPE=GETHOSTBYADDR,                                    *
               HOSTADR=IPBINGHBA,                                      *
               RETCODE=RETCODE,                                        *
               HOSTENT=HOSTENT
         DROP  R11                 Drop temp base reg
         @FMTRC ST.GETHOSTBYADDR,NOERRNO Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPGHBA10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPGHBA10 DS    0H
         SR    R5,R5               Clear R5
         IC    R5,TXTW+1           Get length of message so far
         LA    R6,TXTW+2+1(R5)     Point to end of message (+ 1 space)
         MVC   0(L'USELIT,R6),ST.USELIT Move in literal
         LA    R6,L'USELIT(,R6)    Bump length
         MVC   0(L'IPALIT,R6),ST.IPALIT Move in literal
         LA    R6,L'IPALIT(,R6)    Bump length
         @IPACONV IPBINGHBA,0(,R6),IPAGHBAL Convert IP to printable
         SR    R4,R4
         IC    R4,IPAGHBAL
         LA    R6,0(R4,R6)         Increment position
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JE    IPGHBA50            Skip if yes
         L     R7,HOSTENT
         ICM   R8,15,0(R7)         Get address of hostname
         JZ    IPGHBA50            Skip if not found
         MVC   1(L'RETLIT,R6),ST.RETLIT Move in literal
         LA    R6,L'RETLIT+1(,R6)  Bump length
         MVC   0(L'HNLLIT,R6),ST.HNLLIT Move in literal
         LA    R6,L'HNLLIT(,R6)    Bump length
         SR    R0,R0               Set search for x'00'
IPGHBA20 DS    0H
         SRST  R0,R8               Search for character
         JO    IPGHBA20            Loop until end of search
         LR    R9,R0
         L     R8,0(,R7)           Get back hostname addr
         SR    R0,R8               Length of hostname in R0
         LR    R5,R6               Get current position in message
         LA    R2,TXTW+2           Get start of message
         SR    R5,R2               Get used length
         LA    R1,MAXWTOL-1
         SR    R1,R5               R1 contains what's left in WTO
         JNP   IPGHBA50
         CLR   R0,R1               Compare hostname len
         JH    IPGHBA30            Skip if not enough
         LR    R7,R0               Set length to hostname length
         J     IPGHBA40
IPGHBA30 DS    0H
         LR    R7,R1               Set length to what's left
IPGHBA40 DS    0H
         @EXNEXT R7                Move in hostname
         MVC   0(0,R6),0(R8)       *executed*
         LA    R6,0(R7,R6)         Bump length
IPGHBA50 DS    0H
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
         @SAYMSG ,                 Output message to SYSPRINT and cons
IPGHBAX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* GETHOSTBYNAME subroutine
*
IPGHBN   DS    0H
         BAKR  R14,0               Save regs on stack
         BASR  R11,0               Kilroy woz ere
         USING *,R11               Set temp base reg for macro
         XC    FWORD,FWORD
         SR    R7,R7
         IC    R7,HNAM2L           Get hostname length
         STC   R7,FWORD+3
         EZASMI TYPE=GETHOSTBYNAME,                                    *
               NAMELEN=FWORD,                                          *
               NAME=HNAM2,                                             *
               RETCODE=RETCODE,                                        *
               HOSTENT=HOSTENT
         DROP  R11                 Drop temp base reg
         @FMTRC ST.GETHOSTBYNAME,NOERRNO Format the RC
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JNE   IPGHBN10            Skip if no
         MVI   TXTW+9,C'E'         Set error indicator in message
         OI    FLAG,FLAGFAIL       Flag error for later
IPGHBN10 DS    0H
         SR    R5,R5               Clear R5
         IC    R5,TXTW+1           Get length of message so far
         LA    R6,TXTW+2+1(R5)     Point to end of message (+ 1 space)
         MVC   0(L'USELIT,R6),ST.USELIT Move in literal
         LA    R6,L'USELIT(,R6)    Bump length
         MVC   0(L'HOSTLIT,R6),ST.HOSTLIT Move in literal
         LA    R6,L'HOSTLIT(,R6)   Bump length
         @EXNEXT R7                Move in hostname
         MVC   0(0,R6),HNAM2       *executed*
         LA    R6,0(R7,R6)         Bump length
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
         @SAYMSG ,                 Output message to SYSPRINT and cons
         CLC   RETCODE,ST.MINUSONE Call failed ?
         JE    IPGHBNX             Skip if yes
         L     R7,HOSTENT          Point to structure returned by TCPIP
         L     R7,16(,R7)          Point to list of addresses of IPAs
         SR    R9,R9               Zero IPs found counter
         LA    R4,GHBNIPAS         Point to start of IPs returned
IPGHBN20 DS    0H
         XC    0(4,R4),0(R4)       Clear saved IP address
         ICM   R8,15,0(R7)
         JZ    IPGHBN30
         LA    R9,1(,R9)           Increment IPs found counter
         @CLEAR TXTW               Clear message text
         MVI   TXTW,0              Set unused 1st byte to zero
         LA    R6,TXTW+2           Get message start
         MVC   0(L'MTOID05,R6),ST.MTOID05 Move in start of message
         LA    R6,L'MTOID05(,R6)   Bump length
         SR    R3,R3
         IC    R3,HNAM2L           Get hostname length
         @EXNEXT R3                Move in hostname
         MVC   0(0,R6),HNAM2       *executed*
         LA    R6,0(R3,R6)         Bump length
         MVC   1(L'RETLIT,R6),ST.RETLIT Move in literal
         LA    R6,L'RETLIT+1(,R6)  Bump length
         MVC   0(L'IPALIT2,R6),ST.IPALIT2 Move in literal
         LA    R6,L'IPALIT2(,R6)   Bump length
         CVD   R9,DWORD            Convert to packed decimal
         UNPK  0(3,R6),DWORD+7(1)  Convert to zoned decimal
         OI    2(R6),X'F0'         Fix sign
         MVI   3(R6),C'='
         LA    R6,4(,R6)           Bump length
         @IPACONV 0(,R8),0(,R6),IPAGHBNL Convert IP to printable
         IC    R3,IPAGHBNL
         LA    R6,0(R3,R6)         Bump length
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
         @SAYMSG ,                 Output message to SYSPRINT and cons
         MVC   0(4,R4),0(R8)       Save IP
         LA    R7,4(,R7)           Bump source IPs
         LA    R4,4(,R4)           Bump saved IPs
         J     IPGHBN20            Loop
IPGHBN30 DS    0H
         LA    R5,MAXIPA           Get max IPs allowed
         LA    R4,GHBNIPAS         Point to start of IPs returned
IPGHBN40 DS    0H
         ICM   R8,15,0(R4)         Get IP
         JZ    IPGHBNX             Skip if last
         STCM  R8,15,IPBINGHBA     Save IP for GETHOSTBYADDR
         @BAS  IPGHBA              Call GETHOSTBYADDR subroutine
         LA    R4,4(,R4)           Increment IP table
         JCT   R5,IPGHBN40         Loop until MAXIPA reached
IPGHBNX  DS    0H
         PR    ,                   Restore R2-R14 and return
*
* Format IP API RC & Errno subroutine
*
FMTRC    DS    0H
         BAKR  R14,0               Save regs on stack
         @CLEAR TXTW               Clear message text
         MVI   TXTW,0              Set unused 1st byte to zero
         LA    R6,TXTW+2           Get message start
         MVC   0(L'MTOID00,R6),ST.MTOID00 Move in start of message
         LA    R6,L'MTOID00+1(,R6) Bump length
         SR    R10,R10
         IC    R10,RCCLEN
         @EXNEXT R10               Move in call
         MVC   0(0,R6),RCCALL      *executed
         LA    R6,1(R10,R6)        Bump length
         MVC   0(L'RCLIT,R6),ST.RCLIT Move in literal
         LA    R6,L'RCLIT(,R6)     Bump length
         ICM   R10,15,RETCODE
         JZ    FMTRC10
         MVC   0(L'RCLIT2,R6),ST.RCLIT2 Move in literal
         LA    R6,L'RCLIT2(,R6)    Bump length
         @HEXCONV RCTXT,RETCODE    Convert to printable EBCDIC
         MVC   0(L'RCTXT,R6),RCTXT
         LA    R6,L'RCTXT(,R6)
         MVI   0(R6),C''''
         LA    R6,1(,R6)           Bump length
         J     FMTRC20
FMTRC10  DS    0H
         MVI   0(R6),C'0'          Set RC=0
         LA    R6,1(,R6)           Bump length
         J     FMTRC40             If RC 0 then errno is not relevant
FMTRC20  DS    0H
         ICM   R10,1,RCEN          Errno requested ?
         JNZ   FMTRC40             Skip if no
         MVC   0(L'ENLIT,R6),ST.ENLIT Move in literal
         LA    R6,L'ENLIT(,R6)     Bump length
         ICM   R10,15,ERRNO
         JZ    FMTRC30
         CVD   R10,DWORD           Convert to packed decimal
         UNPK  0(6,R6),DWORD+4(4)  Convert to zoned decimal
         OI    5(R6),X'F0'         Fix sign
         LA    R6,6(,R6)           Bump length
         J     FMTRC40
FMTRC30  DS    0H
         MVI   0(R6),C'0'
         LA    R6,1(,R6)           Bump length
FMTRC40  DS    0H
         LA    R5,TXTW+2           Get message start
         SR    R6,R5               Subtract start from curr position
         STC   R6,TXTW+1           Save new length
FMTRCX   DS    0H
         PR    ,                   Restore R2-R14 and return
*
* Convert a binary IP address to printable EBCDIC
*
IPACONV  DS    0H
         BAKR  R14,0               Save regs on stack
         LR    R2,R1               Save parm address
         L     R8,0(,R2)           Get inpit IP binary
         @CLEAR IPW17              Clear work area
         LA    R9,IPW17            Point to work area
         SR    R4,R4               Zero ip zone length
         LA    R3,4                Set digits in ip addr
         LA    R5,1(,R9)           Point to ip zoned
IPCON10  DS    0H
         SR    R15,R15
         IC    R15,0(,R8)          Get this digit
         CVD   R15,DWORD           Convert to packed decimal
         UNPK  IPWORK,DWORD+6(2)   Convert to zoned decimal
         OI    IPWORK+L'IPWORK-1,X'F0' Fix sign
         LA    R7,2                Set counter
         LA    R6,IPWORK           Point to 1st char
IPCON20  DS    0H
         CLI   0(R6),C'0'          Zero ?
         JNE   IPCON30             Skip if no
         LA    R6,1(,R6)           Set next digit
         JCT   R7,IPCON20          Loop
IPCON30  DS    0H
         LA    R7,1(,R7)           Ensure 1 significant digit
         @EXNEXT R7                Save this part of addrress
         MVC   0(0,R5),0(R6)       *executed*
         LA    R5,0(R7,R5)         Set next in IPZONED
         LA    R4,0(R7,R4)         Add to ipzone length
         CL    R3,ST.ONE           Last loop ?
         JE    IPCON40             Skip if yes
         MVI   0(R5),C'.'          Set period
         LA    R5,1(,R5)           Increment for period
         LA    R4,1(,R4)           Increment for period
IPCON40  DS    0H
         LA    R8,1(,R8)           Set next digit
         JCT   R3,IPCON10          Loop
         STC   R4,0(,R9)           Store this character
         L     R3,4(,R2)           Point to output
         MVC   0(15,R3),1(R9)      Move IP to output (max length 15)
         LA    R0,C' '             Set search for space
IPCON50  DS    0H
         SRST  R0,R3               Search for character
         JO    IPCON50             Loop until end of search
         L     R3,4(,R2)           Point to start of output
         SR    R0,R3               Length of IPA in R0
         L     R3,8(,R2)           Point to output length
         STC   R0,0(,R3)           Return output length
IPCONX   DS    0H
         PR    ,                   Restore R2-R14 and return
*
* Abend routine
*
ABENDFAIL DS   0H
         @SAYMSG ST.MTOTXT08       Output bad message
         ABEND 999,DUMP
*
* Static area for RX-type constants
* Mapped by R12
*
STATIC   DS    0H
*
MACROMASKS DS  0D
         WTO   TEXT=0,ROUTCDE=(2),DESC=(6),MF=L
         DCB   MACRF=(PM),BUFNO=5,DSORG=PS,                            *
               RECFM=VB,LRECL=MAXWTOL+4
         OPEN  (,),MODE=31,MF=L
         CLOSE (,),MODE=31,MF=L
MACROMASKS_LENGTH EQU *-MACROMASKS
ONE      DC    F'1'
MINUSONE DC    F'-1'
HWTHREE  DC    H'3'
PORTD    DC    AL2(DFLTPORT)       Default port
GETIBMOPT DC   C'GETIBMOPT'
GETHOSTID DC   C'GETHOSTID'
GETHOSTNAME DC C'GETHOSTNAME'
GETSOCKNAME DC C'GETSOCKNAME'
GETCLIENTID DC C'GETCLIENTID'
INITAPI  DC    C'INITAPI'
GETHOSTBYADDR DC C'GETHOSTBYADDR'
GETHOSTBYNAME DC C'GETHOSTBYNAME'
SOCKET   DC    C'SOCKET'
BIND     DC    C'BIND'
CLOSE    DC    C'CLOSE'
TERMAPI  DC    C'TERMAPI'
*
* Static forms of messages issued
*
MTOID00  DC    C'HPNST00I'
RCLIT    DC    C'RC='
RCLIT2   DC    C'x'''
ENLIT    DC    C' Errno='
*
MTOID01  DC    C'HPNST01I GETIBMOPT returns IP stack '
NAMLIT   DC    C'named '
VERLIT   DC    C'at version x'''
STALIT   DC    C'status x'''
*
MTOID02  DC    C'HPNST02I'
SIGLIT   DC    C'HPNS test program at'
SYSLIT   DC    C'on system '
*
MTOID05  DC    C'HPNST05I GETHOSTBYNAME using Host='
*
MTOTXT08 DC    C'HPNST08E HPNS API critical error - immediate abend'
*
MTOTXT09 DC    C'HPNST09E HPNS API test failed - check prior messages f*
               or reason'
*
MTOTXT10 DC    C'HPNST10I HPNS API test successful'
*
*
F1SA     DC    C'F1SA'
NONELIT  DC    C'(none)'
IPALIT   DC    C'IPA='
IPALIT2  DC    C'IPA'
HNLIT    DC    C'Shortname='
HNLLIT   DC    C'Hostname='
HOSTLIT  DC    C'Host='
PORTLIT  DC    C'Port='
NAMELIT  DC    C'Name='
USELIT   DC    C'using '
RETLIT   DC    C'returns '
TOLIT    DC    C'to '
TASKLIT  DC    C'Task=x'''
HEXTAB   DC    C'0123456789ABCDEF'
IBMOACT  DC    C'(active)'
IBMOTERM DC    C'(terminating)'
IBMODOWN DC    C'(down)'
IBMOSTOP DC    C'(stopped)'
IBMOABND DC    C'(abended)'
IBMOUNKN DC    C'(unknown)'
MONTAB   DC    C'JanFebMarAprMayJunJulAugSepaaabbbcccdddeeefffOctNovDec*
               '
TIMEMASK DC    X'2120207A20207A2020'
DATEMASK DC    X'2120204020204020202020'
*
* Program defaults
*
MAXWTOL  EQU   125                 Max length of message
MAXIPA   EQU   32                  Max local IP addresses
DDSYSPRT DC    CL8'SYSPRINT'       Message ddname (if present)
DD$NOWTO DC    CL8'$NOWTO'         Suppress WTO ddname (if present)
DFLTPORT EQU   47319               Default port D1800 47319 xos KY
*
* Dynamic getmained work area
*
WORKA    DSECT
         DS    18F
MACROEXECS DS  0D
WTO1     WTO   TEXT=0,ROUTCDE=(2),DESC=(6),MF=L
SYSPRINT DCB   MACRF=(PM),BUFNO=5,DSORG=PS,                            *
               RECFM=VB,LRECL=MAXWTOL+4
OPENL    OPEN  (,),MODE=31,MF=L
CLOSEL   CLOSE (,),MODE=31,MF=L
*
DWORD    DS    D
FWORD    DS    F
ERRNO    DS    F
RETCODE  DS    F
EXITRC   DS    F
HOSTENT  DS    F
IPBIN    DS    F
IPBINGHBA DS   F
MAXSNO   DS    F
IPAPARMS DS    3F
PTIME    DS    0F,PL4              0HHMMSSF
PDATE    DS    0F,PL5,XL3          0DDMMYYYYF
         EZASMI TYPE=TASK,STORAGE=CSECT
TIMEL    TIME  LINKAGE=SYSTEM,MF=L
SOCKDES  DS    H
PORT     DS    AL2
IPWORK   DS    CL3
RCTXT    DS    CL8
RCCALL   DS    CL13
RCCLEN   DS    XL1
RCEN     DS    XL1
ERRNOTXT DS    CL6
FLAG     DS    X
FLAGFAIL EQU   1
FLAGNOF  EQU   2
FLAGNWTO EQU   4
UNPKWORK DS    XL17
IPW17    DS    CL17
IPAGSKNL DS    X
IPAGHBAL DS    X
IPAGHBNL DS    X
IPABINDL DS    X
IPAL     DS    X
IPA      DS    CL15
HNAM2L   DS    X
HNAM2    DS    CL24,X
*
SOCKNAME DS    0CL16             SOCKET NAME STRUCTURE
SOCKFAM  DS    AL2               FAMILY
SOCKPORT DS    AL2
SOCKIPA  DS    AL4
         DS    XL8
*
CLISTR   DS    0CL40             Client STRUCTURE
CLIDOM   DS    AL4               FAMILY
CLINAME  DS    CL8
CLITASK1 DS    CL4
CLITASK2 DS    CL4
         DS    XL20
*
IBMOTM2  DS    XL2
IBMOTM1  DS    XL4
IBMOBUF  DS    CL100
GCLIWORK DS    CL8
USECSTOD DS    CL16
DATEOUT  DS    CL11
*
TEXTREC  DS    0CL258
         DS    CL2
TXTW     DS    CL256
*
* Last entry in work area
GHBNIPAS DS    (MAXIPA)F           Saved IPs from GETHOSTBYNAME
*
*
WORKL    EQU   *-WORKA
*
         DROP  R13,ST              Drop remaining regs
*
         YREGS ,                   Register equates
         DCBD  DSORG=PS,DEVD=DA
         IKJTCB LIST=NO
         IHARB LIST=NO
         IHACDE ,
         IHAPSA LIST=NO
         CVT   DSECT=YES
*
         END   ,                   End of HPNSTST module
