         TITLE 'MLWTO - LE-Compliant WTO function'
***********************************************************************
*
* Name: MLWTO
*
* Abstract:
*
*    An LE compliant assembler function to issue a WTO from
*    IBM C. The WTO will either be a single-line or multi-line
*    WTO depending on the length of the input.
*
*    The program could be adapted for non-LE usage by changing
*    the prologue and epilogue to use MVS-standard, rather than
*    LE-specific linkage.
*
* Operation:
*
*    Receives a single parameter whose address is passed in R1. The
*    first 2 bytes of the parameter indicate the length of the WTO
*    text. The remaining bytes of the parameter are the variable
*    length WTO text itself.
*
*    MLWTO attempts to determine whether it is running authorised. This
*    is important for 2 reasons.
*
*      1) We have to determine whether we are allowed to issue
*         branch-entry rather than SVC-entry WTO. In certain
*         environments, e.g. some system exits, we are forbidden
*         from issuing SVCs of any kind.
*
*      2) If we are 'authorised' then the length of a WTO is increased
*         by 1. This means that single-line WTOs are 127 chars long
*         when authorised and 126 chars when not. MLWTO lines are 71
*         chars long when authorised and 70 chars when not. This is
*         important when determining whether to issue an SLWTO or
*         MLWTO and when splitting the lines of an MLWTO.
*
*     A single line WTO is issued if the input is 126 (127 auth)
*     characters or less.
*
*     If the input is longer, then multiple (up to 255) lines of an
*     MLWTO with line length 70 (71 auth) are built. In building the
*     MLWTO, consideration is given to not splitting 'words' of the
*     input over 2 lines.
*
* Environment:
*
*    IBM compatible mainframe (branch relative/immediate instructions
*    must be supported)
*
*    IBM OS/390, z/OS or subsequent operating system
*
*    Tested with OS/390 2.9 on G5 and z/900 processors and with
*    z/OS 1.2 on a z/900.
*
* Invocation:
*
*    From C code, see the example in AWCPAW.CBT.FILE600.C.PDS(WTOT)
*
*    As a C function, SPRNTLL is usually included in object form
*    via a link edit. For an example see
*    AWCPAW.CBT.FILE600.C.PDS(WTOTC)
*
*    MLWTO could also work with LE-compliant programs in other
*    languages, but this has not been tested.
*
* Notes:
*
*    If link edited as a standalone module, MLWTO should
*    be link edited RENT, AMODE 31, RMODE ANY and best placed
*    in an authorised linklist or LPA library.
*
*    The assembler code does not use a base register, so the
*    relative/immediate forms of branch instructions must be used.
*
*    To avoid USING conflicts when we have to temporarily provide
*    a base register for some system macros, a literal pool
*    is not available. Static literals must be placed by name in
*    the 'STATIC' section and referenced via a labeled dependent
*    USING by specifying an ST prefix.
*
*
* Author: Paul Wells
*         Saudi Aramco Box 12959
*         Dhahran
*         Saudi Arabia
*
* Email:  paul.wells@aramco.com
*
* History:
*
*    PW 18/Sep/2002 - Original
*    PW 02/Mar/2004 - Fixed bug in GETLEN routine which caused
*                     line length to sometimes be out by 1
*
***********************************************************************
*
         MACRO
.* Execute the next instruction so as not to break the sequence
.* of instructions, in order to preserve readability. We hate it
.* when people execute instructions half a mile away in the code!
&NAME    @EXNEXT &@EXNEXTL
&NAME    LR    15,&@EXNEXTL
         BCTR  15,0
         BASR  14,0
         AHI   14,@EXN&SYSNDX-*
         EX    15,0(,14)
         J     *+10
@EXN&SYSNDX EQU *
         MEND
*
         MACRO
.* Internal subroutine call
&NAME    @BAS  &@BASLOC
         CNOP  2,4
&NAME    BASR  15,0
         AHI   15,@BAS1&SYSNDX-*
         J     @BAS2&SYSNDX
@BAS1&SYSNDX DC A(&@BASLOC)
@BAS2&SYSNDX EQU *
         L     15,0(,15)
         BASR  14,15
         MEND
*
*
MLWTO    CSECT ,                   Establish the csect
MLWTO    AMODE 31                  It addresses all storage
MLWTO    RMODE ANY                 It can reside anywhere
         EDCPRLG BASEREG=NONE,USRDSAL=WORKL LE compliant prologue
         USING WORKA,R13           Map LE DSA
         L     R11,0(,R1)          Get address of parm area
         BASR  R12,0               Get current location
         AHI   R12,STATIC-*        Add offset to static area
ST       USING STATIC,R12          Map static area
         @BAS  INIT                Invoke Initialisation
         LA    R8,2(,R11)          Get pointer to message text
         CLC   0(2,R11),LINELENS   Fit on single line WTO ?
         JH    MLWTOBLD            Skip if no
         MVC   WTOLINES(2),0(R11)  Get length of data
         IC    R3,1(,R11)          Put len in reg
         @EXNEXT R3                Move data to WTO line
         MVC   WTOLINES+2(0),0(R8) *EXECUTED*
         LA    R3,WTOLINES         Point to WTO line
         SR    R0,R0               Clear R0
         TM    FLAG,FLBRWTO        Auth for BR-entry WTO ?
         JO    SLWTOA              Skip if yes
         WTO   TEXT=(R3),MF=(E,WTOE1) Issue WTO (single line)
         J     GETOUT              Skip MLWTO
SLWTOA   DS    0H
         WTO   TEXT=(R3),LINKAGE=BRANCH,MF=(E,WTOE1) WTO (single line)
         J     GETOUT              Skip MLWTO
MLWTOBLD DS    0H
         @BAS  FLINE               Invoke first line processing
         LM    R4,R7,0(R1)         Get saved Regs passed back
         @BAS  RMLINE              Invoke processing for rest of lines
         SR    R0,R0               Clear R0
         TM    FLAG,FLBRWTO        Auth for BR-entry WTO ?
         JO    MLWTOA              Skip if yes
         WTO   MF=(E,WTOE2)        Issue MLWTO
         J     GETOUT              Skip
MLWTOA   DS    0H
         LA    R1,WTOE2
         WTO   LINKAGE=BRANCH,MF=(E,WTOE2) Issue MLWTO
GETOUT   DS    0H
         EDCEPIL ,                 LE compliant epilogue
*
* INIT
*
INIT     DS    0H
         BAKR  R14,0               Stack regs
         LA    R14,ST.MACROMASKS
         LA    R15,MACROMASKS_LENGTH
         LA    R0,MACROEXECS
         LR    R1,R15
         MVCL  R0,R14              Initialise macros
         MVI   FLAG,0              Reset flag byte
         MVC   LINELENS,ST.ALINELENSU Default unauth 126 char SLWTO
         MVC   LINELENM,ST.ALINELENMU Default unauth 70 char MLWTO
         TM    X'A3'(0),X'01'      z/architecture present ?
*        TM    FLCARCH-PSA(0),PSAZARCH z/architecture present ?
         JNO   INIT10              Skip if no
         @BAS  AUTHZCHK            Authorisation check (z/Arch)
         J     INITX
INIT10   DS    0H
         @BAS  AUTHECHK            Authorisation check (not z/Arch)
INITX    DS    0H
         PR
*
* AUTHZCHK (z/Arch and above)
* 2 levels of authorisation are checked by this routine
*   1) Authorised to write 127 line WTOs and 71 line MLWTOs.
*      (non-authorised programs write 126 line WTOs and 70 line MLWTOs)
*      127 line WTOs and 71 line MLWTOs are authorised by any
*      one of APF, KEY0-7 or supervisor state.
*   2) Authorised to use branch entry WTO. This requires KEY0-7 and
*      supervisor state.
* The EPSW instruction is used. This was first available on z/Arch
* but was supposedly retrofitted to ESA/390. Since we don't know how
* to check for it's availability in ESA/390, we only use it only on
* z/Arch and above.
*
AUTHZCHK DS    0H
         BAKR  R14,0               Stack regs
         ICM   R15,15,PSATOLD-PSA(0) SRB mode ?
         JZ    AUTHZC40            Skip if yes
         L     R15,TCBJSCB-TCB(,R15) Get JSCB
         USING IEZJSCB,R15         Map JSCB
         TM    JSCBOPTS,JSCBAUTH   APF auth ?
         JNO   AUTHZC10            Skip if no
         DROP  R15
         OI    FLAG,FLAPF          Set APF flag
AUTHZC10 DS    0H
*        EPSW  R1,0                Get left half of PSW
         DC    0H,X'B98D0010'      EPSW  R1,0
         CLM   R1,B'0100',ST.KEY8  KEY < 8 ?
         JNL   AUTHZC20            Skip if no
         OI    FLAG,FLKEY0_7       Set KEY0-7 flag
AUTHZC20 DS    0H
         N     R1,ST.PROBSTATE     Problem state ?
         JNZ   AUTHZC30            Skip if yes
         OI    FLAG,FLSUPV         Set supervisor state flag
AUTHZC30 DS    0H
         TM    FLAG,FLAPF+FLKEY0_7+FLSUPV Any of APF/KEY0-7/SUPV ?
         JZ    AUTHZCHKX           Skip if no
         TM    FLAG,FLKEY0_7+FLSUPV KEY0-7+SUPV ?
         JNO   AUTHZC50            Skip if no
AUTHZC40 DS    0H
         OI    FLAG,FLBRWTO        Set BRWTO flag
AUTHZC50 DS    0H
         OI    FLAG,FLPLUS1
         MVC   LINELENS,ST.ALINELENSA Auth 127 char SLWTO
         MVC   LINELENM,ST.ALINELENMA Auth 71 char MLWTO
AUTHZCHKX DS   0H
         PR
*
* AUTHECHK (not z/Arch)
* 2 levels of authorisation are checked by this routine
*   1) Authorised to write 127 line WTOs and 71 line MLWTOs.
*      (non-authorised programs write 126 line WTOs and 70 line MLWTOs)
*      127 line WTOs and 71 line MLWTOs are authorised by any
*      one of APF, KEY0-7 or supervisor state.
*   2) Authorised to use branch entry WTO. This requires KEY0-7 and
*      supervisor state.
* The TESTAUTH SVC is used.
*
AUTHECHK DS    0H
         BAKR  R14,0               Stack regs
         ICM   R15,15,PSATOLD-PSA  SRB mode ?
         JZ    AUTHEC10            Assume auth if yes
         L     R2,TCBRBP-TCB(,R15)
         SH    R2,ST.LENRBPRE
         CLI   RBSTAB1-RBPRFX(R2),RBFTPRB In a PRB ?
         JNE   AUTHEC10            Assume auth if not in PRB
         BASR  R14,0               Kilroy woz ere
         USING *,R14               Map 'ere'
         TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=1 APF/KEY0/SUPV ?
         DROP  R14
         LTR   R15,R15             APF/KEY0/SUPV ?
         JNZ   AUTHECHKX           Skip if not any of APF/KEY0/SUPV
         MVC   LINELENS,ST.ALINELENSA Auth 127 char SLWTO
         MVC   LINELENM,ST.ALINELENMA Auth 71 char MLWTO
         BASR  R14,0               Kilroy woz ere
         USING *,R14               Map 'ere'
         TESTAUTH FCTN=0,STATE=YES,KEY=NO,RBLEVEL=1 SUPV ?
         DROP  R14
         LTR   R15,R15
         JNZ   AUTHECHKX           Skip if not SUPV
         BASR  R14,0               Kilroy woz ere
         USING *,R14               Map 'ere'
         TESTAUTH FCTN=0,STATE=NO,KEY=YES,RBLEVEL=1 KEY 0 ?
         DROP  R14
         LTR   R15,R15
         JNZ   AUTHECHKX           Skip if not KEY0
AUTHEC10 DS    0H
         OI    FLAG,FLBRWTO
         MVC   LINELENS,ST.ALINELENSA Auth 127 char SLWTO
         MVC   LINELENM,ST.ALINELENMA Auth 71 char MLWTO
AUTHECHKX DS   0H
         PR
*
* Format the first line of the MLWTO
*
FLINE    DS    0H
         BAKR  R14,0               Stack regs
* Internal Register usage
*  r4 remaining data len
*  r5 pointer to data
*  r2 current line len
*  r6 pointer to next WTO line address pointer (on exit)
*  r7 pointer to next WTO line text location (on exit)
         LA    R5,2(,R11)          Get pointer to message text
         SR    R4,R4               Clear
         ICM   R4,3,0(R11)         Get pointer to message len
         SR    R6,R6               Clear
         IC    R6,WTOE2+8+(WPXLNGTH-WPX) Get len of WPL
         LA    R6,WTOE2+8(R6)      Point to end of WPL
         CH    R4,LINELENM         More than a lines worth ?
         JH    FLINE10             Skip if yes
         LR    R2,R4               Set line len to data len
         MVI   0(R6),WPLLTFC+WPLLTFD Set type 'data end' line
         J     FLINE20
FLINE10  DS    0H
         MVI   0(R6),WPLLTFC       Set type 'data' line
         @BAS  GETLEN
         LR    R2,R1               Get Assigned length
FLINE20  DS    0H
         LA    R6,WPLLINES-WPLLTF(,R6) Point to line count in WPL
         MVI   0(R6),1             Set no. of lines so far
         ST    R6,LINESADDR        Save line counter pointer
         LA    R7,WTOLINES         Point to 1st WTO line
         ST    R7,WTOE2+(WPLADTXT-WPL) Save addr in WPL
         STCM  R2,3,0(R7)          Set len of line for WTO
         @EXNEXT R2                Move data into WTO line
         MVC   2(0,R7),0(R5)       *EXECUTED*
*
* Debugging code to test authorisation check
*
         TM    FLAG,FLBRWTO
         JNO   FLINE30
*        MVI   5(R7),C'$'          Branch entry WTO indicator
         J     FLINE40
FLINE30  DS    0H
         TM    FLAG,FLPLUS1
         JNO   FLINE40
*        MVI   5(R7),C'#'          71/127 length indicator
FLINE40  DS    0H
*
* End debugging code to test authorisation check
*
         LA    R7,2(R2,R7)         point to next WTO line
         LA    R6,WTOADDRS         point to next WTO line address
         LA    R5,0(R2,R5)         Point past current line in data
         SR    R4,R2               Subtract the line length
FLINEX   DS    0H
         STM   R4,R7,FLINEREG
         LA    R1,FLINEREG
         PR
*
* RMLINE
* Format the second and subsequent lines of the MLWTO
*
RMLINE   DS    0H
         BAKR  R14,0               Stack regs
* Internal Register usage
*  r4 remaining data len
*  r5 pointer to current data
*  r2 current line len
*  r3 number of WTO lines remaining before max reached
*  r6 pointer to WTO line address pointer
*  r7 pointer to WTO line text location
         LTR   R4,R4               Any data left ?
         JNP   RMLINEX             Skip if no
         LA    R3,NUMLINES         Get max no. of lines
         BCTR  R3,0                Decrement for 1st line
RMLINE10 DS    0H
         CH    R4,LINELENM         More than a lines worth left ?
         JH    RMLINE20            Skip if yes
         LR    R2,R4               Set line len to data len
         J     RMLINE30            Skip
RMLINE20 DS    0H
         @BAS  GETLEN              Get preferred len of this line
         LR    R2,R1               Get assigned length
RMLINE30 DS    0H
         @EXNEXT R2                Move data into WTO line
         MVC   2(0,R7),0(R5)       *EXECUTED*
         STCM  R2,3,0(R7)          Set len of line for WTO
         XC    0(8,R6),0(R6)       Clear current WTO address pointer
         MVI   1(R6),8             Set len of ptr to 8
         LTR   R3,R3               Last line ?
         JZ    RMLINE40            Skip if yes
         CH    R4,LINELENM         Last bit of data ?
         JH    RMLINE50            Skip if no
RMLINE40 DS    0H
         OI    2(R6),WPLLTFC+WPLLTFD Set type 'data end' line
         J     RMLINE60            Skip
RMLINE50 DS    0H
         OI    2(R6),WPLLTFC       Set type 'data' line
RMLINE60 DS    0H
         STCM  R7,15,4(R6)         Save addr of current WTO line
         L     R1,LINESADDR        Get pointer to no. of lines
         IC    R15,0(,R1)          Get no. of lines
         LA    R15,1(,R15)         Increment
         STC   R15,0(,R1)          Save no. of lines
         S     R3,ST.ONE           Decrement used lines counter
         JM    RMLINEX             Skip if negative
RMLINE70 DS    0H
         LA    R7,2(R2,R7)         Point to next WTO line
         LA    R6,8(,R6)           Point to next WTO line address
         LA    R5,0(R2,R5)         Point past current line in data
         SR    R4,R2               Subtract the line length
         JP    RMLINE10            Loop if some data left
RMLINEX  DS    0H
         PR
*
* GETLEN
* Sets length of line up to and including last space/tab/LF/CR.
* The idea is to not split long strings (dataset names) over multiple
* lines.
*
GETLEN   DS    0H
         BAKR  R14,0               Stack regs
* Internal Register usage
*  r5 pointer to current data (must be set on entry)
*  r2 work
*  r1 position of delimiter (TRT) and length of line (on exit)
         SLR   R1,R1
         ICM   R1,3,LINELENM       Get max length of data
         LA    R2,0(R1,R5)         Point past end of data
         BCTR  R2,0                Point to last byte of data
         MVCIN REVLINE,0(R2)       Reverse data
         TRT   REVLINE,ST.TRTAB    Find first (last) delim
         JZ    GETLENX             Skip if no delim found
         LA    R2,REVLINE          Point to reversed data
         SLR   R1,R2               Get offset into data for delim
         SLR   R2,R2
         ICM   R2,3,LINELENM       Get length of data
         SLR   R2,R1               Get length of data after delim
         LR    R1,R2               Return length in R1
GETLENX  DS    0H
         PR
*
STATIC   DS    0D
MACROMASKS DS  0D
         WTO   TEXT=,LINKAGE=,                                         *
               ROUTCDE=(2),DESC=(6,7),MF=L
         WTO   TEXT=((,D)),LINKAGE=,                                   *
               ROUTCDE=(2),DESC=(6,7),MF=L
MACROMASKS_LENGTH EQU *-MACROMASKS
NUMLINES EQU   255                 MLWTO max lines (auth)
LINELENSA EQU  127                 SLWTO auth line len
LINELENSU EQU  126                 SLWTO unauth line len
LINELENMA EQU  71                  MLWTO auth line len
LINELENMU EQU  70                  MLWTO unauth line len
ALINELENSA DC  AL2(LINELENSA)      SLWTO auth line len
ALINELENSU DC  AL2(LINELENSU)      SLWTO unauth line len
ALINELENMA DC  AL2(LINELENMA)      MLWTO auth line len
ALINELENMU DC  AL2(LINELENMU)      MLWTO unauth line len
TRTAB    DC    XL256'00'
         ORG   TRTAB+X'05'         Tab
         DC    X'FF'
         ORG   TRTAB+X'0A'         CR
         DC    X'FF'
         ORG   TRTAB+X'15'         LF
         DC    X'FF'
         ORG   TRTAB+C' '          Space
         DC    X'FF'
         ORG
ONE      DC    F'1'
PROBSTATE DC   0F,XL4'00010000'
LENRBPRE DC    AL2(RBBASIC-RBPRFX)
KEY8     DC    X'80'
*
WORKA    DSECT
         DS    CL(CEEDSASZ)       LE area
USERDSA  EQU   *
MACROEXECS DS  0D
WTOE1    WTO   TEXT=,LINKAGE=,                                         *
               ROUTCDE=(2),DESC=(6,7),MF=L
WTOE2    WTO   TEXT=((,D)),LINKAGE=,                                   *
               ROUTCDE=(2),DESC=(6,7),MF=L
WTOADDRS DS    0F,254AL2,254XL2,254AL4     Contiguous from WTOE2
*
FLAG     DS    X
FLBRWTO  EQU   B'00000001'         Branch entry WTO flag
FLKEY0_7 EQU   B'00000010'         KEY0-7 flag
FLSUPV   EQU   B'00000100'         Supervisor state flag
FLAPF    EQU   B'00001000'         APF auth flag
FLPLUS1  EQU   B'00010000'         71/127 length indicator
LINESADDR DS   F
LINELENM DS    AL2
LINELENS DS    AL2
FLINEREG DS    4F
REVLINE  DS    CL(LINELENMA)
WTOLINES DS    AL2,CL(LINELENMA),254AL2,255CL(LINELENMA)
*
WORKL    EQU   *-USERDSA
*
         DROP  R13,ST
*
         IEZWPL ,                  WTO parm list
         YREGS ,                   Register equates
         IHAPSA ,
         IHARB  ,
         IKJTCB ,
         IEZJSCB ,
         CEEDSA ,                 LE Dynamic Storage Area
*
         END   ,                   End of MLWTO module
