         TITLE 'EDCXFGS - non-SVC SPC storage malloc/free routines'
***********************************************************************
*
* Name: @@XGET (Entry point), EDCXGET (CSECT)
*
* Abstract:
*
*    Virtual storage allocation subroutine for Systems Programming
*    C using the STORAGE macro. The default (brainless) @@XGET uses
*    SVC 120 which limits SPC use in system exits where SVCs are not
*    allowed.
*
* Operation:
*
*    Input:  R0 - length of storage to obtain (high bit on for storage
*            above the line).
*            R14 - Return address
*
*    Output: R0 - length of storage obtained
*            R1 - address of memory obtained
*
*    The program does rudimentary checks to see whether it is running
*    authorised so it can use the preferred high private subpool
*    230, where possible.
*
* Environment:
*
*    IBM compatible mainframe (branch relative/immediate instructions
*    must be supported)
*    IBM OS/390, z/OS or subsequent operating system
*
* Invocation:
*
*    Via malloc function of Systems Programming C.
*
*    Must be explicitly included via link-edit. For an example see
*    AWCPAW.CBT.FILE600.C.PDS(FTPC119C).
*
* Notes:
*
*    IBM samples state that only R0-2/4/14/15 may be modified by this
*    routine and a save area is not provided. We get around this by
*    using the linkage stack to save and restore registers.
*
*    The assembler code does not use a base register, so the
*    relative/immediate forms of branch instructions must be used.
*
*    To avoid USING conflicts when we have to temporarily provide
*    a base register for some system macros, a literal pool
*    is not available. Static literals must be placed by name in
*    the 'STATIC' section and referenced via a labeled dependent
*    USING by specifying an ST prefix.
*
*
* Author: Paul Wells
*         Saudi Aramco Box 12959
*         Dhahran
*         Saudi Arabia
*
* Email:  paul.wells@aramco.com
*
* History:
*
*    PW 18/Sep/2002 - Original
*
*
***********************************************************************
*
         MACRO
.* Set CSECT eyecatcher
&NAME    @ID   &@IDN
&NAME    J     @LAB&SYSNDX
         DC    AL1(@LAB&SYSNDX-*)
         AIF   (T'&@IDN EQ 'O').@IDL1
         DC    C'&@IDN '
         AGO   .@IDL2
.@IDL1   ANOP
         DC    C'&SYSECT '
.@IDL2   ANOP
         DC    C'&SYSDATC &SYSTIME &SYSJOB '
         DC    C'&SYSIN_DSN',C'(',C'&SYSIN_MEMBER',C') '
         DC    C'&SYSTEM_ID ',X'B4',C'Paul Wells (Saudi Aramco) 2002 '
@LAB&SYSNDX DS 0H
         MEND
*
EDCXGET  AMODE ANY
EDCXGET  RMODE ANY
EDCXGET  CSECT
@@XGET   @ID   __xget
         ENTRY @@XGET
         BAKR  R14,0               SAVE REGS ON STACK
         BASR  R12,0               Get current location
         AHI   R12,GSTATIC-*       Add offset to static area
ST       USING GSTATIC,R12         Map static area with R12
         LR    R5,R0               Save R0
         SR    R6,R6               Set subpool zero for later
         ICM   R8,15,PSATOLD-PSA(0) SRB mode ?
         JZ    GET10               Assume auth if yes
         TM    X'A3'(0),X'01'      z/architecture present ?
*        TM    FLCARCH-PSA(0),PSAZARCH z/architecture present ?
         JNO   GET20               Skip if no
*        EPSW  R1,0                Get left half of PSW
         DC    0H,X'B98D0010'      EPSW  R1,0
         CLM   R1,B'0100',ST.GKEY8 KEY < 8 ?
         JNL   GET30               Skip if no
         N     R1,ST.GPROBSTATE    Problem state ?
         JNZ   GET30               Skip if yes
GET10    DS    0H
         LA    R6,230              Set subpool 230 for auth callers
         J     GET30
GET20    DS    0H
         L     R8,TCBRBP-TCB(,R8)  Get our RB
         SH    R8,ST.GLENRBPRE     Point at RB prefix
         CLI   RBSTAB1-RBPRFX(R8),RBFTPRB In a PRB ?
         JNE   GET10               Assume auth subpool if no
GET30    DS    0H
         LTR   R5,R5               Memory above or below?
         JNL   GET40               Skip if below
         BASR  R14,0
         USING *,R14               Temp base reg for macro
         LTR   R14,R14             Are we running above the line?
         JNL   GET40               If below line, skip to below
         LA    R5,0(,R5)           Clear high bit
         STORAGE OBTAIN,LENGTH=(5),COND=YES,                           *
               LOC=ANY,SP=(6)
         DROP  R14
         LTR   R15,R15             Was it successful?
         JZ    GETOUT              Yes...
         SR    R1,R1               No, indicate failure
         J     GETOUT
GET40    DS    0H                  Get memory below the line
         BASR  R14,0
         USING *,R14               Temp base reg for macro
         STORAGE OBTAIN,LENGTH=(5),COND=YES,                           *
               LOC=BELOW,SP=(6)
         DROP  R14
         LTR   R15,R15             Was it successful?
         JZ    GETOUT              Yes...
         SR    R1,R1               No, indicate failure in R1
GETOUT   DS    0H
         PR
*
GSTATIC  DS    0D
GPROBSTATE DC  0F,XL4'00010000'
GLENRBPRE DC   0H,AL2(RBBASIC-RBPRFX)
GKEY8    DC    X'80'
*
         DROP  ST
*
***********************************************************************
*
* Name: Entry point @@XFREE, CSECT EDCXFREE
*
* Abstract:
*
*    Virtual storage free subroutine for Systems Programming
*    C using the STORAGE macro. The default (brainless) @@XFREE uses
*    SVC 120 which limits SPC use in system exits where SVCs are not
*    allowed.
*
* Operation:
*
*    Input:  R0 - length of storage to free
*            R1 - address of storage to free
*            R14 - Return address
*
*    The program does rudimentary checks to see whether it is running
*    authorised so it can detect use of the preferred high private
*    subpool 230.
*
* Environment:
*
*    IBM compatible mainframe (branch relative/immediate instructions
*    must be supported)
*    IBM OS/390, z/OS or subsequent operating system
*
* Invocation:
*
*    Via free function of Systems Programming C.
*
*    Must be explicitly included via link-edit. For an example see
*    AWCPAW.CBT.FILE600.C.PDS(FTPC119C).
*
* Notes:
*
*    IBM samples state that only R0-2/4/14/15 may be modified by this
*    routine and a save area is not provided. We get around this by
*    using the linkage stack to save and restore registers.
*
*    The assembler code does not use a base register, so the
*    relative/immediate forms of branch instructions must be used.
*
*    To avoid USING conflicts when we have to temporarily provide
*    a base register for some system macros, a literal pool
*    is not available. Static literals must be placed by name in
*    the 'STATIC' section and referenced via a labeled dependent
*    USING by specifying an ST prefix.
*
*
* Author: Paul Wells
*         Enterprise Servers Division
*         Saudi Aramco
*         Dhahran
*         Saudi Arabia
*
* Email:  paul.wells@aramco.com
*
* History:
*
*    PW 18/Sep/2002 - Original
*
*
***********************************************************************
*
EDCXFREE AMODE ANY
EDCXFREE RMODE ANY
EDCXFREE CSECT
@@XFREE  @ID   __xfree
         ENTRY @@XFREE
         BAKR  R14,0               SAVE REGS ON STACK
         BASR  R12,0               Get current location
         AHI   R12,FSTATIC-*       Add offset to static area
ST       USING FSTATIC,R12         Map static area with R12
         LR    R5,R0               Save R0
         LR    R4,R1               Save R1
         SR    R6,R6               Set subpool zero for later
         ICM   R8,15,PSATOLD-PSA(0) SRB mode ?
         JZ    FREE10              Assume auth if yes
         TM    X'A3'(0),X'01'      z/architecture present ?
*        TM    FLCARCH-PSA(0),PSAZARCH z/architecture present ?
         JNO   FREE20              Skip if no
*        EPSW  R1,0                Get left half of PSW
         DC    0H,X'B98D0010'      EPSW  R1,0
         CLM   R1,B'0100',ST.FKEY8 KEY < 8 ?
         JNL   FREE30              Skip if no
         N     R1,ST.FPROBSTATE    Problem state ?
         JNZ   FREE30              Skip if yes
FREE10   DS    0H
         LA    R6,230              Set subpool 230 for auth
         J     FREE30
FREE20   DS    0H
         L     R8,TCBRBP-TCB(,R8)  Get our RB
         SH    R8,ST.FLENRBPRE     Point at RB prefix
         CLI   RBSTAB1-RBPRFX(R8),RBFTPRB In a PRB ?
         JNE   FREE10              Assume auth subpool if no
FREE30   DS    0H
         LA    R5,0(,R5)           Clear high bit
         BASR  R14,0
         USING *,R14               Temp base reg for macro
         STORAGE RELEASE,LENGTH=(5),ADDR=(4),COND=YES,SP=(6)
         DROP  R14
         PR
*
FSTATIC  DS    0D
FPROBSTATE DC  0F,XL4'00010000'
FLENRBPRE DC   0H,AL2(RBBASIC-RBPRFX)
FKEY8    DC    X'80'
*
         DROP  ST
*
         YREGS ,
         IHAPSA ,
         IHAASCB ,
         IHARB ,
         IKJTCB ,
*
         END
